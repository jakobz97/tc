{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { codeCompletion, getCreatedUploads, getSuitableUploads, uploadCode } from '../services/review.service';\nconst initialState = {\n  createdUploads: [],\n  suitableUploads: {}\n};\nexport const codeCompletionAsync = createAsyncThunk('review/codeCompletion', async data => {\n  const response = await codeCompletion(data);\n  console.log(response);\n  return response.data;\n});\nexport const uploadCodeAsync = createAsyncThunk('review/uploadCode', async data => {\n  const response = await uploadCode(data);\n  return response.data;\n});\nexport const getUploadsAsync = createAsyncThunk('review/getUploads', async () => {\n  const response = await getCreatedUploads();\n  return response;\n});\nexport const getSuitableUploadsAsync = createAsyncThunk('review/getSuitableUploads', async searchOffset => {\n  const response = await getSuitableUploads(searchOffset);\n  return response;\n});\nexport const reviewSlice = createSlice({\n  name: 'review',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(codeCompletionAsync.fulfilled, (state, action) => {//todo add to redux\n    }).addCase(uploadCodeAsync.fulfilled, (state, action) => {//todo add to redux\n    }).addCase(getUploadsAsync.fulfilled, (state, action) => {\n      state.createdUploads = action.payload.codes.sort((a, b) => b.proposalCounter - a.proposalCounter);\n    }).addCase(getSuitableUploadsAsync.fulfilled, (state, action) => {\n      state.suitableUploads = { ...state.suitableUploads,\n        ...action.payload\n      };\n    });\n  }\n});\nexport const {} = reviewSlice.actions;\nexport const selectCreatedUploads = state => state.review.createdUploads;\nexport const selectSuitableUploads = state => state.review.suitableUploads;\nexport default reviewSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/slice/reviewSlice.js"],"names":["createAsyncThunk","createSlice","codeCompletion","getCreatedUploads","getSuitableUploads","uploadCode","initialState","createdUploads","suitableUploads","codeCompletionAsync","data","response","console","log","uploadCodeAsync","getUploadsAsync","getSuitableUploadsAsync","searchOffset","reviewSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","codes","sort","a","b","proposalCounter","actions","selectCreatedUploads","review","selectSuitableUploads","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAAQC,cAAR,EAAwBC,iBAAxB,EAA2CC,kBAA3C,EAA+DC,UAA/D,QAAgF,4BAAhF;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,EADC;AAEjBC,EAAAA,eAAe,EAAE;AAFA,CAArB;AAKA,OAAO,MAAMC,mBAAmB,GAAGT,gBAAgB,CAC/C,uBAD+C,EAE/C,MAAOU,IAAP,IAAgB;AACZ,QAAMC,QAAQ,GAAG,MAAMT,cAAc,CAACQ,IAAD,CAArC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,SAAOA,QAAQ,CAACD,IAAhB;AACH,CAN8C,CAA5C;AASP,OAAO,MAAMI,eAAe,GAAGd,gBAAgB,CAC3C,mBAD2C,EAE3C,MAAOU,IAAP,IAAgB;AACZ,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,IAAD,CAAjC;AACA,SAAOC,QAAQ,CAACD,IAAhB;AACH,CAL0C,CAAxC;AAQP,OAAO,MAAMK,eAAe,GAAGf,gBAAgB,CAC3C,mBAD2C,EAE3C,YAAY;AACR,QAAMW,QAAQ,GAAG,MAAMR,iBAAiB,EAAxC;AACA,SAAOQ,QAAP;AACH,CAL0C,CAAxC;AAQP,OAAO,MAAMK,uBAAuB,GAAGhB,gBAAgB,CACnD,2BADmD,EAEnD,MAAOiB,YAAP,IAAwB;AACpB,QAAMN,QAAQ,GAAG,MAAMP,kBAAkB,CAACa,YAAD,CAAzC;AACA,SAAON,QAAP;AACH,CALkD,CAAhD;AAQP,OAAO,MAAMO,WAAW,GAAGjB,WAAW,CAAC;AACnCkB,EAAAA,IAAI,EAAE,QAD6B;AAEnCb,EAAAA,YAFmC;AAGnCc,EAAAA,QAAQ,EAAE,EAHyB;AAKnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACad,mBAAmB,CAACe,SADjC,EAC4C,CAACC,KAAD,EAAQC,MAAR,KAAmB,CACvD;AACH,KAHL,EAIKH,OAJL,CAIaT,eAAe,CAACU,SAJ7B,EAIwC,CAACC,KAAD,EAAQC,MAAR,KAAmB,CACnD;AACH,KANL,EAOKH,OAPL,CAOaR,eAAe,CAACS,SAP7B,EAOwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAAClB,cAAN,GAAuBmB,MAAM,CAACC,OAAP,CAAeC,KAAf,CAAqBC,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,eAAF,GAAkBF,CAAC,CAACE,eAAxD,CAAvB;AACH,KATL,EAUKT,OAVL,CAUaP,uBAAuB,CAACQ,SAVrC,EAUgD,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3DD,MAAAA,KAAK,CAACjB,eAAN,GAAwB,EAAC,GAAGiB,KAAK,CAACjB,eAAV;AAA2B,WAAGkB,MAAM,CAACC;AAArC,OAAxB;AACH,KAZL;AAaH;AAnBkC,CAAD,CAA/B;AAsBP,OAAO,MAAM,KAAKT,WAAW,CAACe,OAAvB;AAEP,OAAO,MAAMC,oBAAoB,GAAIT,KAAD,IAAWA,KAAK,CAACU,MAAN,CAAa5B,cAArD;AACP,OAAO,MAAM6B,qBAAqB,GAAIX,KAAD,IAAWA,KAAK,CAACU,MAAN,CAAa3B,eAAtD;AAEP,eAAeU,WAAW,CAACmB,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {codeCompletion, getCreatedUploads, getSuitableUploads, uploadCode} from '../services/review.service';\n\nconst initialState = {\n    createdUploads: [],\n    suitableUploads: {}\n};\n\nexport const codeCompletionAsync = createAsyncThunk(\n    'review/codeCompletion',\n    async (data) => {\n        const response = await codeCompletion(data);\n        console.log(response)\n        return response.data;\n    }\n);\n\nexport const uploadCodeAsync = createAsyncThunk(\n    'review/uploadCode',\n    async (data) => {\n        const response = await uploadCode(data);\n        return response.data;\n    }\n);\n\nexport const getUploadsAsync = createAsyncThunk(\n    'review/getUploads',\n    async () => {\n        const response = await getCreatedUploads();\n        return response;\n    }\n);\n\nexport const getSuitableUploadsAsync = createAsyncThunk(\n    'review/getSuitableUploads',\n    async (searchOffset) => {\n        const response = await getSuitableUploads(searchOffset);\n        return response;\n    }\n);\n\nexport const reviewSlice = createSlice({\n    name: 'review',\n    initialState,\n    reducers: {\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(codeCompletionAsync.fulfilled, (state, action) => {\n                //todo add to redux\n            })\n            .addCase(uploadCodeAsync.fulfilled, (state, action) => {\n                //todo add to redux\n            })\n            .addCase(getUploadsAsync.fulfilled, (state, action) => {\n                state.createdUploads = action.payload.codes.sort((a, b) => b.proposalCounter-a.proposalCounter);\n            })\n            .addCase(getSuitableUploadsAsync.fulfilled, (state, action) => {\n                state.suitableUploads = {...state.suitableUploads, ...action.payload}\n            })\n    },\n});\n\nexport const {} = reviewSlice.actions;\n\nexport const selectCreatedUploads = (state) => state.review.createdUploads;\nexport const selectSuitableUploads = (state) => state.review.suitableUploads;\n\nexport default reviewSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}