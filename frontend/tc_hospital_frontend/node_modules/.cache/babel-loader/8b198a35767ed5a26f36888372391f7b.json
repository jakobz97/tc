{"ast":null,"code":"import axios from \"axios\";\n/**\n * @function (01) parse the user token, expiry and refresh token\n *           (02) if token has expired send refresh token to backend and generate a new access token\n *           (03) create authorization header with Bearer access token and return\n */\n\nexport default async function auth_header() {\n  //01\n  const user = JSON.parse(localStorage.getItem(\"user\")); //02\n\n  /*if (user.tokenExp < Math.floor(Date.now() / 1000)) {\n    const accessData = await axios.post('localhost.../refresh', {\n      refreshToken: user.refreshToken,\n    });\n    if (accessData.data.accessToken) localStorage.setItem(\"user\", JSON.stringify(accessData.data));\n  }\n   */\n  //03\n\n  if (user && user.accessToken) return {\n    Authorization: \"Bearer \" + user.accessToken\n  };\n  return {};\n}","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/services/auth_header.js"],"names":["axios","auth_header","user","JSON","parse","localStorage","getItem","accessToken","Authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,eAAeC,WAAf,GAA6B;AAC1C;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb,CAF0C,CAG1C;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACE;;AACA,MAAIJ,IAAI,IAAIA,IAAI,CAACK,WAAjB,EAA8B,OAAO;AAAEC,IAAAA,aAAa,EAAE,YAAYN,IAAI,CAACK;AAAlC,GAAP;AAC9B,SAAO,EAAP;AACD","sourcesContent":["import axios from \"axios\";\n\n/**\n * @function (01) parse the user token, expiry and refresh token\n *           (02) if token has expired send refresh token to backend and generate a new access token\n *           (03) create authorization header with Bearer access token and return\n */\nexport default async function auth_header() {\n  //01\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  //02\n  /*if (user.tokenExp < Math.floor(Date.now() / 1000)) {\n    const accessData = await axios.post('localhost.../refresh', {\n      refreshToken: user.refreshToken,\n    });\n    if (accessData.data.accessToken) localStorage.setItem(\"user\", JSON.stringify(accessData.data));\n  }\n   */\n  //03\n  if (user && user.accessToken) return { Authorization: \"Bearer \" + user.accessToken };\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}