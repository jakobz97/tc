{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, logout, signup } from '../services/auth.service';\nconst initialState = {\n  loggedIn: true,\n  userType: \"admin\" //todo change back again to empty\n\n};\nexport const loginAsync = createAsyncThunk('auth/login', async credentials => {\n  const response = await login(credentials);\n  return response.data;\n});\nexport const signUpAsync = createAsyncThunk('auth/signup', async signupData => {\n  const response = await signup(signupData);\n  return response;\n});\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  const response = await logout();\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setLoggedIn: (state, action) => {\n      state.loggedIn = action.payload;\n    },\n    setUserType: (state, action) => {\n      state.userType = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      console.log('loaded');\n      console.log('loaded', action.payload);\n    }).addCase(signUpAsync.fulfilled, (state, action) => {\n      console.log('signed up');\n      console.log(state);\n      console.log('signed up', action.payload);\n    }).addCase(logoutAsync.fulfilled, (state, action) => {\n      console.log('loaded logout');\n    });\n  }\n});\nexport const {\n  setLoggedIn,\n  setMessage,\n  setUserType\n} = authSlice.actions;\nexport const selectIsLoggedIn = state => state.auth.loggedIn;\nexport const selectUserType = state => state.auth.userType;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/slice/authSlice.js"],"names":["createAsyncThunk","createSlice","login","logout","signup","initialState","loggedIn","userType","loginAsync","credentials","response","data","signUpAsync","signupData","logoutAsync","authSlice","name","reducers","setLoggedIn","state","action","payload","setUserType","extraReducers","builder","addCase","fulfilled","console","log","setMessage","actions","selectIsLoggedIn","auth","selectUserType","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,MAAvB,QAAoC,0BAApC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,IADO;AAEjBC,EAAAA,QAAQ,EAAE,OAFO,CAEC;;AAFD,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CACtC,YADsC,EAEtC,MAAOS,WAAP,IAAuB;AACnB,QAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACO,WAAD,CAA5B;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACH,CALqC,CAAnC;AAQP,OAAO,MAAMC,WAAW,GAAGZ,gBAAgB,CACvC,aADuC,EAEvC,MAAOa,UAAP,IAAsB;AAClB,QAAMH,QAAQ,GAAG,MAAMN,MAAM,CAACS,UAAD,CAA7B;AACA,SAAOH,QAAP;AACH,CALsC,CAApC;AAQP,OAAO,MAAMI,WAAW,GAAGd,gBAAgB,CACvC,aADuC,EAEvC,YAAY;AACR,QAAMU,QAAQ,GAAG,MAAMP,MAAM,EAA7B;AACA,SAAOO,QAAQ,CAACC,IAAhB;AACH,CALsC,CAApC;AAQP,OAAO,MAAMI,SAAS,GAAGd,WAAW,CAAC;AACjCe,EAAAA,IAAI,EAAE,MAD2B;AAEjCX,EAAAA,YAFiC;AAGjCY,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACb,QAAN,GAAiBc,MAAM,CAACC,OAAxB;AACH,KAHK;AAINC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,MAAM,CAACC,OAAxB;AACH;AANK,GAHuB;AAWjCE,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACajB,UAAU,CAACkB,SADxB,EACmC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC9CO,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,MAAM,CAACC,OAA7B;AACH,KAJL,EAKKI,OALL,CAKab,WAAW,CAACc,SALzB,EAKoC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC/CO,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,MAAM,CAACC,OAAhC;AACH,KATL,EAUKI,OAVL,CAUaX,WAAW,CAACY,SAVzB,EAUoC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC/CO,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,KAZL;AAaH;AAzBgC,CAAD,CAA7B;AA4BP,OAAO,MAAM;AAACV,EAAAA,WAAD;AAAcW,EAAAA,UAAd;AAA0BP,EAAAA;AAA1B,IAAyCP,SAAS,CAACe,OAAzD;AAEP,OAAO,MAAMC,gBAAgB,GAAIZ,KAAD,IAAWA,KAAK,CAACa,IAAN,CAAW1B,QAA/C;AACP,OAAO,MAAM2B,cAAc,GAAId,KAAD,IAAWA,KAAK,CAACa,IAAN,CAAWzB,QAA7C;AAEP,eAAeQ,SAAS,CAACmB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {login, logout, signup} from '../services/auth.service';\n\nconst initialState = {\n    loggedIn: true,\n    userType: \"admin\" //todo change back again to empty\n};\n\nexport const loginAsync = createAsyncThunk(\n    'auth/login',\n    async (credentials) => {\n        const response = await login(credentials);\n        return response.data;\n    }\n);\n\nexport const signUpAsync = createAsyncThunk(\n    'auth/signup',\n    async (signupData) => {\n        const response = await signup(signupData);\n        return response;\n    }\n);\n\nexport const logoutAsync = createAsyncThunk(\n    'auth/logout',\n    async () => {\n        const response = await logout();\n        return response.data;\n    }\n);\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        setLoggedIn: (state, action) => {\n            state.loggedIn = action.payload;\n        },\n        setUserType: (state, action) => {\n            state.userType = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(loginAsync.fulfilled, (state, action) => {\n                console.log('loaded');\n                console.log('loaded', action.payload)\n            })\n            .addCase(signUpAsync.fulfilled, (state, action) => {\n                console.log('signed up')\n                console.log(state)\n                console.log('signed up', action.payload)\n            })\n            .addCase(logoutAsync.fulfilled, (state, action) => {\n                console.log('loaded logout');\n            });\n    },\n});\n\nexport const {setLoggedIn, setMessage, setUserType} = authSlice.actions;\n\nexport const selectIsLoggedIn = (state) => state.auth.loggedIn;\nexport const selectUserType = (state) => state.auth.userType;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}