{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/sub/menu/CategoryItems.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { selectMenu, setSelectedCategory, updateMenuCategory } from \"../../../slice/menuSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport '../../../styles/sub/menu/CategoryItem.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CategoryItems = () => {\n  _s();\n\n  const menuList = useSelector(selectMenu);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    console.log(menuList);\n  });\n  /**\n   * @function (01)\n   */\n\n  const removeCategory = () => {//todo have double check in place where name has to be repeated\n  };\n  /**\n   * @function (01) update the UI of the clicked button and remove the UI from the previously selected button\n   *           (02) update the currently selected category\n   *           (02) todo update the UI of the category\n   * @param index is the index of the currently selected menu category\n   */\n\n\n  const selectCategory = (e, index) => {\n    if (document.querySelector('.active_category_item')) document.querySelector('.active_category_item').classList.remove('active_category_item');\n    e.currentTarget.classList.add('active_category_item');\n    console.log(index);\n    dispatch(setSelectedCategory(index));\n  };\n  /**\n   * @function (01) make the field editable and set teh focus\n   *           (02) once the focus is left remove the editable\n   *           (03) check if value is empty\n   *           (04) update the category name via reducer\n   */\n\n\n  const renameCategory = (e, i) => {\n    //01\n    let txtField = e.currentTarget.childNodes[0];\n    txtField.contentEditable = \"true\";\n    txtField.focus(); //02\n\n    txtField.addEventListener('focusout', () => {\n      txtField.contentEditable = \"false\"; //03\n\n      if (txtField.innerHTML === '') return txtField.innerHTML = menuList[i].name; //04\n\n      dispatch(updateMenuCategory({\n        index: i,\n        val: txtField.innerHTML\n      }));\n    });\n  }; //todo drag and drop and change order - https://codepen.io/retrofuturistic/pen/tlbHE\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu_category_container\",\n    children: menuList.length > 0 ? menuList.map((menuCategory, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category_item\",\n        draggable: \"true\",\n        onClick: e => selectCategory(e, index),\n        onDoubleClick: e => renameCategory(e, index),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category_name\",\n          children: menuCategory.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category_btn category_rank\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty_menu_txt\",\n      children: \"Erstellen Sie Ihre erste Kategorie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CategoryItems, \"OyXClJ33QgZ1kaX/dgduBPKoL/8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CategoryItems;\nexport default CategoryItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryItems\");","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/sub/menu/CategoryItems.js"],"names":["React","useState","useEffect","selectMenu","setSelectedCategory","updateMenuCategory","useDispatch","useSelector","CategoryItems","menuList","dispatch","console","log","removeCategory","selectCategory","e","index","document","querySelector","classList","remove","currentTarget","add","renameCategory","i","txtField","childNodes","contentEditable","focus","addEventListener","innerHTML","name","val","length","map","menuCategory"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {selectMenu, setSelectedCategory, updateMenuCategory} from \"../../../slice/menuSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport '../../../styles/sub/menu/CategoryItem.css';\n\nconst CategoryItems = () => {\n\n    const menuList = useSelector(selectMenu)\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        console.log(menuList)\n    })\n\n    /**\n     * @function (01)\n     */\n    const removeCategory = () => {\n        //todo have double check in place where name has to be repeated\n    };\n\n    /**\n     * @function (01) update the UI of the clicked button and remove the UI from the previously selected button\n     *           (02) update the currently selected category\n     *           (02) todo update the UI of the category\n     * @param index is the index of the currently selected menu category\n     */\n    const selectCategory = (e, index) => {\n        if (document.querySelector('.active_category_item')) document.querySelector('.active_category_item').classList.remove('active_category_item')\n        e.currentTarget.classList.add('active_category_item');\n        console.log(index)\n        dispatch(setSelectedCategory(index));\n    }\n\n    /**\n     * @function (01) make the field editable and set teh focus\n     *           (02) once the focus is left remove the editable\n     *           (03) check if value is empty\n     *           (04) update the category name via reducer\n     */\n    const renameCategory = (e, i) => {\n        //01\n        let txtField = e.currentTarget.childNodes[0];\n        txtField.contentEditable = \"true\";\n        txtField.focus();\n        //02\n        txtField.addEventListener('focusout', () => {\n            txtField.contentEditable = \"false\";\n            //03\n            if (txtField.innerHTML === '') return txtField.innerHTML = menuList[i].name\n            //04\n            dispatch(updateMenuCategory({index: i, val:txtField.innerHTML}));\n        })\n    }\n\n    //todo drag and drop and change order - https://codepen.io/retrofuturistic/pen/tlbHE\n\n    return (\n        <div className=\"menu_category_container\">\n            {menuList.length > 0 ? (\n                menuList.map((menuCategory, index)=> {\n                    return <div className=\"category_item\" draggable=\"true\" onClick={(e) => selectCategory(e, index)} onDoubleClick={(e) => renameCategory(e, index)}>\n                        <div className=\"category_name\">{menuCategory.name}</div>\n                        {/*<div className=\"category_dish_count\"># {menuCategory.dishes.length}</div>}*/}\n                        <div className=\"category_btn category_rank\">{index+1}</div>\n                        {/*<div className=\"category_btn\" onClick={removeCategory}>X</div>*/}\n                    </div>\n                })\n            ) : (\n                <div className=\"empty_menu_txt\">Erstellen Sie Ihre erste Kategorie</div>\n            )}\n        </div>\n    );\n};\n\nexport default CategoryItems;\n"]},"metadata":{},"sourceType":"module"}