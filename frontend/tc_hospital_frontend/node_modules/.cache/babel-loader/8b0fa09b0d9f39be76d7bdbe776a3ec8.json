{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, logout, signup } from '../services/auth.service';\nconst initialState = {\n  loggedIn: false,\n  message: \"\",\n  userType: \"customer\" //todo change back again to empty\n\n};\nexport const loginAsync = createAsyncThunk('auth/login', async credentials => {\n  const response = await login(credentials.email, credentials.password);\n  return response.data;\n});\nexport const signUpAsync = createAsyncThunk('auth/signup', async signupData => {\n  const response = await signup(signupData);\n  console.log(response.data);\n  return response.data;\n});\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  const response = await logout();\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setLoggedIn: (state, action) => {\n      state.loggedIn = action.payload;\n    },\n    setMessage: (state, action) => {\n      state.message = action.payload;\n    },\n    setUserType: (state, action) => {\n      state.userType = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.pending, state => {\n      console.log('loading');\n    }).addCase(loginAsync.fulfilled, (state, action) => {\n      console.log('loaded');\n    }).addCase(signUpAsync.pending, state => {\n      console.log('loading sign up');\n    }).addCase(signUpAsync.fulfilled, (state, action) => {\n      console.log('signed up');\n    }).addCase(logoutAsync.pending, state => {\n      console.log('loading logout');\n    }).addCase(logoutAsync.fulfilled, (state, action) => {\n      console.log('loaded logout');\n    });\n  }\n});\nexport const {\n  setLoggedIn,\n  setMessage,\n  setUserType\n} = authSlice.actions;\nexport const selectIsLoggedIn = state => state.auth.loggedIn;\nexport const selectMessage = state => state.auth.message;\nexport const selectUserType = state => state.auth.userType;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Documents/Start-up/restaurant/frontend/restaurant_spa/src/slice/authSlice.js"],"names":["createAsyncThunk","createSlice","login","logout","signup","initialState","loggedIn","message","userType","loginAsync","credentials","response","email","password","data","signUpAsync","signupData","console","log","logoutAsync","authSlice","name","reducers","setLoggedIn","state","action","payload","setMessage","setUserType","extraReducers","builder","addCase","pending","fulfilled","actions","selectIsLoggedIn","auth","selectMessage","selectUserType","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {login, logout, signup} from '../services/auth.service';\n\nconst initialState = {\n    loggedIn: false,\n    message: \"\",\n    userType: \"customer\" //todo change back again to empty\n};\n\nexport const loginAsync = createAsyncThunk(\n    'auth/login',\n    async (credentials) => {\n        const response = await login(credentials.email, credentials.password);\n        return response.data;\n    }\n);\n\nexport const signUpAsync = createAsyncThunk(\n    'auth/signup',\n    async (signupData) => {\n        const response = await signup(signupData);\n        console.log(response.data)\n        return response.data;\n    }\n);\n\nexport const logoutAsync = createAsyncThunk(\n    'auth/logout',\n    async () => {\n        const response = await logout();\n        return response.data;\n    }\n);\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        setLoggedIn: (state, action) => {\n            state.loggedIn = action.payload;\n        },\n        setMessage: (state, action) => {\n            state.message = action.payload;\n        },\n        setUserType: (state, action) => {\n            state.userType = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(loginAsync.pending, (state) => {\n                console.log('loading');\n            })\n            .addCase(loginAsync.fulfilled, (state, action) => {\n                console.log('loaded');\n\n            })\n            .addCase(signUpAsync.pending, (state) => {\n                console.log('loading sign up');\n            })\n            .addCase(signUpAsync.fulfilled, (state, action) => {\n                console.log('signed up');\n            })\n            .addCase(logoutAsync.pending, (state) => {\n                console.log('loading logout');\n            })\n            .addCase(logoutAsync.fulfilled, (state, action) => {\n                console.log('loaded logout');\n            });\n    },\n});\n\nexport const {setLoggedIn, setMessage, setUserType} = authSlice.actions;\n\nexport const selectIsLoggedIn = (state) => state.auth.loggedIn;\nexport const selectMessage = (state) => state.auth.message;\nexport const selectUserType = (state) => state.auth.userType;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}