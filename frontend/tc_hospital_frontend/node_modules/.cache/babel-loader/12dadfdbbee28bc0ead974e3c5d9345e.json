{"ast":null,"code":"import _asyncToGenerator from\"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/tc/frontend/tc_hospital_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/tc/frontend/tc_hospital_frontend/node_modules/@babel/runtime/regenerator/index.js\";import axios from\"axios\";/**\n * @function (01) parse the user token, expiry and refresh token\n *           (02) if token has expired send refresh token to backend and generate a new access token\n *           (03) create authorization header with Bearer access token and return\n */export default function auth_header(){return _auth_header.apply(this,arguments);}function _auth_header(){_auth_header=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var user;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://01\nuser=JSON.parse(localStorage.getItem(\"user\"));//02\n/*if (user.tokenExp < Math.floor(Date.now() / 1000)) {\n    const accessData = await axios.post('localhost.../refresh', {\n      refreshToken: user.refreshToken,\n    });\n    if (accessData.data.accessToken) localStorage.setItem(\"user\", JSON.stringify(accessData.data));\n  }\n   */ //03\nif(!(user&&user.accessToken)){_context.next=3;break;}return _context.abrupt(\"return\",{Authorization:\"Bearer \"+user.accessToken});case 3:return _context.abrupt(\"return\",{});case 4:case\"end\":return _context.stop();}}},_callee);}));return _auth_header.apply(this,arguments);}","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/tc/frontend/tc_hospital_frontend/src/services/auth_header.js"],"names":["axios","auth_header","user","JSON","parse","localStorage","getItem","accessToken","Authorization"],"mappings":"6WAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA;AACA;AACA;AACA,GACA,uBAA8BC,CAAAA,WAA9B,8C,6FAAe,4IACb;AACMC,IAFO,CAEAC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAFA,CAGb;AACA;AACF;AACA;AACA;AACA;AACA;AACA,KAVe,CAWb;AAXa,KAYTJ,IAAI,EAAIA,IAAI,CAACK,WAZJ,0DAYwB,CAAEC,aAAa,CAAE,UAAYN,IAAI,CAACK,WAAlC,CAZxB,yCAaN,EAbM,wD","sourcesContent":["import axios from \"axios\";\n\n/**\n * @function (01) parse the user token, expiry and refresh token\n *           (02) if token has expired send refresh token to backend and generate a new access token\n *           (03) create authorization header with Bearer access token and return\n */\nexport default async function auth_header() {\n  //01\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  //02\n  /*if (user.tokenExp < Math.floor(Date.now() / 1000)) {\n    const accessData = await axios.post('localhost.../refresh', {\n      refreshToken: user.refreshToken,\n    });\n    if (accessData.data.accessToken) localStorage.setItem(\"user\", JSON.stringify(accessData.data));\n  }\n   */\n  //03\n  if (user && user.accessToken) return { Authorization: \"Bearer \" + user.accessToken };\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}