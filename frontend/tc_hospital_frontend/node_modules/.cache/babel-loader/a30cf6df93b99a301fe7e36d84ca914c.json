{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/main/student/editor/Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport '../../../../styles/shared/editor/editor.css';\nimport '../../../../styles/shared/fadein.css';\nimport { codeCompletionAsync, compareCodesAsync } from \"../../../../slice/reviewSlice\";\nimport { fromRange } from \"xpath-range\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = _ref => {\n  _s();\n\n  let {\n    close,\n    taskData\n  } = _ref;\n  const [selTxt, setSelTxt] = useState({});\n  const [tempCodes, setTempCodes] = useState([]);\n  const dispatch = useDispatch();\n  /**\n   * @function (01) get the dark background, the content wrapper and the inputs\n   *           (02) increase the dark background opacity\n   *           (03) fade up the content wrapper\n   *           =============\n   *           (04) ensure that the code display has the same length as the overflow text\n   *           (05) ensure that the empty codes text is centered\n   */\n\n  useEffect(() => {\n    //01\n    let bg = document.querySelector('.menu_dark_bg'),\n        content = document.querySelector('.create_input_wrapper'),\n        input = document.querySelector('.create_input'); //02\n\n    bg.style.cssText = \"opacity: 100%\"; //03\n\n    content.style.marginTop = \"0\"; //04\n\n    document.getElementById('internal_code_display').style.height = document.getElementsByClassName('code_input')[0].scrollHeight + 'px'; //05\n\n    document.getElementsByClassName('empty_editor')[0].style.height = document.getElementsByClassName('code_input')[0].offsetHeight + 'px';\n  }, []);\n  /**\n   * @function (01) get the background and content\n   *           (02) return if user clicked on the content\n   *           (03) user clicked outside of content - hide\n   *           (04) after timeout set state again to hidden\n   */\n\n  const hideCreateView = (e, forced) => {\n    //01\n    let bg = document.querySelector('.menu_dark_bg'),\n        content = document.querySelector('.create_input_wrapper'); //02\n\n    if (!forced && content.contains(e.target)) return; //03\n\n    bg.style.cssText = \"opacity: 0%\";\n    content.style.marginTop = \"150vh\"; //04\n\n    setTimeout(() => close(), 350);\n  };\n  /**\n   * @function (01) define the target by choosing the complementary of the scrolled div\n   *           (02) assign scroll toÃ¼ and scroll left to the target based on the event scrolled position\n   */\n\n\n  const syncScroll = (e, origin) => {\n    //01\n    const target = origin === 'display' ? document.getElementsByClassName('code_input')[0] : document.getElementsByClassName('code_display')[0]; //02\n\n    target.scrollTop = e.currentTarget.scrollTop;\n    target.scrollLeft = e.currentTarget.scrollLeft;\n  }; //====================================================================\n\n  /**\n   * @function (01) check that there is no overlapping regarding the codes\n   *           (02) highlight the code\n   *           (03) push into data structure (updates the code overview on the right side)\n   */\n\n\n  const addCode = () => {\n    //01\n    let startOverlapCheck = tempCodes.filter(code => selTxt.start > code.start && selTxt.start < code.end);\n    let endOverlapCheck = tempCodes.filter(code => selTxt.end < code.end && selTxt.end > code.start);\n    if (startOverlapCheck.length > 0 || endOverlapCheck.length > 0) return alert('No overlaps possbile'); //02\n\n    setSelectionRange(selTxt.start, selTxt.end); //highlight(\"yellow\");\n    //03\n\n    setTempCodes(currentCodes => [...currentCodes, selTxt]);\n  };\n  /**\n   * @function (01) get all selects and positions\n   *           (02) if only cursor change takes place only hide the tooltip\n   *           (03) reposition tooltip\n   *           (04) set selected text state\n   */\n\n\n  const selector = e => {\n    //01\n    let select = window.getSelection(),\n        selectRange = select.getRangeAt(0),\n        selectPos = selectRange.getBoundingClientRect(),\n        codeInput = document.getElementsByClassName('code_input')[0],\n        codeInputPos = codeInput.getBoundingClientRect(),\n        tooltip = document.getElementById('tooltip_editor_wrapper'); //02\n\n    if (selectPos.width < 1) return tooltip.style.display = \"none\"; //03\n\n    tooltip.style.display = \"inline\";\n    tooltip.style.top = selectPos.top - codeInputPos.top - tooltip.offsetHeight - 10 + codeInput.scrollTop + 'px';\n    tooltip.style.left = selectPos.left - codeInputPos.left + selectPos.width / 2 - tooltip.offsetWidth / 2 + 'px'; //04\n\n    let xpath = fromRange(selectRange, codeInput);\n    setSelTxt({ ...selTxt,\n      ...{\n        val: selectRange.toString(),\n        start: xpath.startOffset,\n        end: xpath.endOffset,\n        top: selectPos.top - codeInputPos.top + codeInput.scrollTop - 5,\n        id: uuidv4()\n      }\n    });\n  };\n  /**\n   * @function (01)\n   *           (02)\n   * @param start\n   * @param end\n   */\n\n\n  function setSelectionRange(start, end) {\n    let el = document.getElementsByClassName('code_input')[0];\n    var range = document.createRange();\n    range.selectNodeContents(el);\n    var textNodes = getTextNodesIn(el);\n    var foundStart = false;\n    var charCount = 0,\n        endCharCount;\n\n    for (var i = 0, textNode; textNode = textNodes[i++];) {\n      endCharCount = charCount + textNode.length;\n\n      if (!foundStart && start >= charCount && (start < endCharCount || start == endCharCount && i <= textNodes.length)) {\n        range.setStart(textNode, start - charCount);\n        foundStart = true;\n      }\n\n      if (foundStart && end <= endCharCount) {\n        range.setEnd(textNode, end - charCount);\n        break;\n      }\n\n      charCount = endCharCount;\n    }\n\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range); //Helper functions\n\n    function getTextNodesIn(node) {\n      var textNodes = [];\n\n      if (node.nodeType === 3) {\n        textNodes.push(node);\n      } else {\n        var children = node.childNodes;\n\n        for (var i = 0, len = children.length; i < len; ++i) {\n          textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n        }\n      }\n\n      return textNodes;\n    }\n  } //====================================================================\n\n  /**\n   * @function (00) wait until typing ended and dispatch send to backend for code completion and wait - if more than one is found throw error\n   *           (01) duplicate the array\n   *           (02) find the array entry by index\n   *           (03) add code to this entry\n   *           (04) add the description\n   *           (05) indicate that this code is ok -> remove any border color\n   * @param e is the event\n   * @param i is the index of the array element which is\n   * @param type either id or desc of the code - required for the autocompletion\n   */\n\n\n  let typingTimerEdit;\n\n  const editCode = (e, i, type) => {\n    //00\n    clearTimeout(typingTimerEdit);\n    if (!e.target.value) return;\n    typingTimerEdit = setTimeout(() => {\n      dispatch(codeCompletionAsync({\n        type: type,\n        val: e.target.value\n      })).then(res => {\n        if (res.payload.matches.length !== 1) {\n          document.getElementsByClassName('ind_code_display')[i].style.border = \"1px solid red\";\n          return document.getElementsByClassName('large_code_section')[i].value = 'Zu viele Ergebnisse - ' + res.payload.matches.length;\n        } //01\n\n\n        let newArr = [...tempCodes]; //02\n\n        let mergedObj = { ...newArr[i],\n          icdCode: e.target.value\n        };\n        newArr[i] = mergedObj; //03\n\n        setTempCodes(newArr); //04\n\n        document.getElementsByClassName('large_code_section')[i].value = res.payload.matches[0][2]; //05\n\n        document.getElementsByClassName('ind_code_display')[i].style.border = \"none\";\n      }).catch(err => {\n        console.log(err);\n      });\n    }, 1000);\n  };\n  /**\n   * @function (01) duplicate the array\n   *           (02) splice the array\n   *           (03) set the new temp codes\n   * @param i index of the highlight which is deleted\n   */\n\n\n  const removeTxt = i => {\n    let newArr = [...tempCodes]; //02\n\n    newArr.splice(i, 1); //03\n\n    setTempCodes(newArr);\n  }; // ====================================================================\n\n  /**\n   * @function (01) check if all temp codes were assigned - if not proceed and let user assign icd 10 code\n   *           (02) upload codes to backend and perform server side comparison\n   *           (03) once finished jump to the analytics page where detailed information can be obtained\n   */\n\n\n  const compareCodes = () => {\n    //01\n    const nonFinishedCodes = tempCodes.filter((code, index) => !code.icdCode || code.icdCode === \"\");\n    if (nonFinishedCodes.length > 0) return alert('not all codes were assigned'); //02\n\n    dispatch(compareCodesAsync()).then(res => {}).catch(err => {\n      console.log('err', error);\n    });\n  };\n  /**\n   * @function\n   */\n\n\n  const proposeCode = () => {}; //====================================================================\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu_dark_bg\",\n    onClick: hideCreateView,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_input_wrapper enlarged_create_input_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create_input_hide\",\n        onClick: e => {\n          hideCreateView(e, true);\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code_input enlarged_code_input\",\n        onMouseUp: selector,\n        onScroll: e => syncScroll(e, 'input'),\n        children: [taskData.txt, /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"tooltip_editor_wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tooltip_btn\",\n            onClick: addCode,\n            children: \"Code hinzuf\\xFCgen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code_display enlarged_code_display\",\n        onScroll: e => syncScroll(e, 'display'),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"internal_code_display\",\n          children: tempCodes.length > 0 ? tempCodes.map((code, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ind_code_display\",\n              id: code.id,\n              style: {\n                top: code.top + 'px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Code ID\",\n                className: \"small_code_section\",\n                onChange: e => editCode(e, i, 'id')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Code Desc\",\n                className: \"large_code_section\",\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"remove_code_btn\",\n                onClick: () => removeTxt(i),\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 40\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty_editor\",\n            children: \"Vergebe Codes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), tempCodes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"student_compare_btn\",\n          onClick: () => compareCodes(),\n          children: \"Vergleichen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"wSJqQ/8yirSjdqF5RYHIWlUbHV8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/main/student/editor/Editor.js"],"names":["React","useEffect","useState","codeCompletionAsync","compareCodesAsync","fromRange","v4","uuidv4","useDispatch","Editor","close","taskData","selTxt","setSelTxt","tempCodes","setTempCodes","dispatch","bg","document","querySelector","content","input","style","cssText","marginTop","getElementById","height","getElementsByClassName","scrollHeight","offsetHeight","hideCreateView","e","forced","contains","target","setTimeout","syncScroll","origin","scrollTop","currentTarget","scrollLeft","addCode","startOverlapCheck","filter","code","start","end","endOverlapCheck","length","alert","setSelectionRange","currentCodes","selector","select","window","getSelection","selectRange","getRangeAt","selectPos","getBoundingClientRect","codeInput","codeInputPos","tooltip","width","display","top","left","offsetWidth","xpath","val","toString","startOffset","endOffset","id","el","range","createRange","selectNodeContents","textNodes","getTextNodesIn","foundStart","charCount","endCharCount","i","textNode","setStart","setEnd","sel","removeAllRanges","addRange","node","nodeType","push","children","childNodes","len","apply","typingTimerEdit","editCode","type","clearTimeout","value","then","res","payload","matches","border","newArr","mergedObj","icdCode","catch","err","console","log","removeTxt","splice","compareCodes","nonFinishedCodes","index","error","proposeCode","txt","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAO,6CAAP;AACA,OAAO,sCAAP;AAEA,SAAQC,mBAAR,EAA6BC,iBAA7B,QAAqD,+BAArD;AAEA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B;AAEA,SAAQC,WAAR,QAA0B,aAA1B;;;AAEA,MAAMC,MAAM,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAwB;AAEpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMc,QAAQ,GAAGR,WAAW,EAA5B;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACIP,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIgB,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAT;AAAA,QACIC,OAAO,GAAGF,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CADd;AAAA,QAEIE,KAAK,GAAGH,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAFZ,CAFY,CAKZ;;AACAF,IAAAA,EAAE,CAACK,KAAH,CAASC,OAAT,GAAmB,eAAnB,CANY,CAOZ;;AACAH,IAAAA,OAAO,CAACE,KAAR,CAAcE,SAAd,GAA0B,GAA1B,CARY,CASZ;;AACAN,IAAAA,QAAQ,CAACO,cAAT,CAAwB,uBAAxB,EAAiDH,KAAjD,CAAuDI,MAAvD,GAAgER,QAAQ,CAACS,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,EAAiDC,YAAjD,GAA8D,IAA9H,CAVY,CAWZ;;AACAV,IAAAA,QAAQ,CAACS,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,EAAmDL,KAAnD,CAAyDI,MAAzD,GAAkER,QAAQ,CAACS,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,EAAiDE,YAAjD,GAA8D,IAAhI;AACH,GAbQ,EAaN,EAbM,CAAT;AAeA;AACJ;AACA;AACA;AACA;AACA;;AACI,QAAMC,cAAc,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAClC;AACA,QAAIf,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAT;AAAA,QACIC,OAAO,GAAGF,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CADd,CAFkC,CAIlC;;AACA,QAAI,CAACa,MAAD,IAAWZ,OAAO,CAACa,QAAR,CAAiBF,CAAC,CAACG,MAAnB,CAAf,EAA2C,OALT,CAMlC;;AACAjB,IAAAA,EAAE,CAACK,KAAH,CAASC,OAAT,GAAmB,aAAnB;AACAH,IAAAA,OAAO,CAACE,KAAR,CAAcE,SAAd,GAA0B,OAA1B,CARkC,CASlC;;AACAW,IAAAA,UAAU,CAAC,MAAMzB,KAAK,EAAZ,EAAgB,GAAhB,CAAV;AACH,GAXD;AAaA;AACJ;AACA;AACA;;;AACI,QAAM0B,UAAU,GAAG,CAACL,CAAD,EAAIM,MAAJ,KAAe;AAC9B;AACA,UAAMH,MAAM,GAAGG,MAAM,KAAK,SAAX,GAAuBnB,QAAQ,CAACS,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAAvB,GAA0ET,QAAQ,CAACS,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,CAAzF,CAF8B,CAG9B;;AACAO,IAAAA,MAAM,CAACI,SAAP,GAAmBP,CAAC,CAACQ,aAAF,CAAgBD,SAAnC;AACAJ,IAAAA,MAAM,CAACM,UAAP,GAAoBT,CAAC,CAACQ,aAAF,CAAgBC,UAApC;AACH,GAND,CArDoC,CA6DpC;;AAEA;AACJ;AACA;AACA;AACA;;;AACI,QAAMC,OAAO,GAAG,MAAM;AAClB;AACA,QAAIC,iBAAiB,GAAG5B,SAAS,CAAC6B,MAAV,CAAiBC,IAAI,IAAIhC,MAAM,CAACiC,KAAP,GAAeD,IAAI,CAACC,KAApB,IAA6BjC,MAAM,CAACiC,KAAP,GAAeD,IAAI,CAACE,GAA1E,CAAxB;AACA,QAAIC,eAAe,GAAGjC,SAAS,CAAC6B,MAAV,CAAiBC,IAAI,IAAIhC,MAAM,CAACkC,GAAP,GAAaF,IAAI,CAACE,GAAlB,IAAyBlC,MAAM,CAACkC,GAAP,GAAaF,IAAI,CAACC,KAApE,CAAtB;AACA,QAAIH,iBAAiB,CAACM,MAAlB,GAA2B,CAA3B,IAAgCD,eAAe,CAACC,MAAhB,GAAyB,CAA7D,EAAgE,OAAOC,KAAK,CAAC,sBAAD,CAAZ,CAJ9C,CAKlB;;AACAC,IAAAA,iBAAiB,CAACtC,MAAM,CAACiC,KAAR,EAAejC,MAAM,CAACkC,GAAtB,CAAjB,CANkB,CAOlB;AACA;;AACA/B,IAAAA,YAAY,CAACoC,YAAY,IAAI,CAAC,GAAGA,YAAJ,EAAkBvC,MAAlB,CAAjB,CAAZ;AACH,GAVD;AAYA;AACJ;AACA;AACA;AACA;AACA;;;AACI,QAAMwC,QAAQ,GAAIrB,CAAD,IAAO;AACpB;AACA,QAAIsB,MAAM,GAAGC,MAAM,CAACC,YAAP,EAAb;AAAA,QACIC,WAAW,GAAGH,MAAM,CAACI,UAAP,CAAkB,CAAlB,CADlB;AAAA,QAEIC,SAAS,GAAGF,WAAW,CAACG,qBAAZ,EAFhB;AAAA,QAGIC,SAAS,GAAG1C,QAAQ,CAACS,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAHhB;AAAA,QAIIkC,YAAY,GAAGD,SAAS,CAACD,qBAAV,EAJnB;AAAA,QAKIG,OAAO,GAAG5C,QAAQ,CAACO,cAAT,CAAwB,wBAAxB,CALd,CAFoB,CAQpB;;AACA,QAAIiC,SAAS,CAACK,KAAV,GAAkB,CAAtB,EAAyB,OAAOD,OAAO,CAACxC,KAAR,CAAc0C,OAAd,GAAwB,MAA/B,CATL,CAUpB;;AACAF,IAAAA,OAAO,CAACxC,KAAR,CAAc0C,OAAd,GAAwB,QAAxB;AACAF,IAAAA,OAAO,CAACxC,KAAR,CAAc2C,GAAd,GAAqBP,SAAS,CAACO,GAAV,GAAgBJ,YAAY,CAACI,GAA7B,GAAmCH,OAAO,CAACjC,YAA3C,GAA0D,EAA1D,GAA+D+B,SAAS,CAACtB,SAA1E,GAAqF,IAAzG;AACAwB,IAAAA,OAAO,CAACxC,KAAR,CAAc4C,IAAd,GAAsBR,SAAS,CAACQ,IAAV,GAAiBL,YAAY,CAACK,IAA9B,GAAqCR,SAAS,CAACK,KAAV,GAAgB,CAArD,GAAyDD,OAAO,CAACK,WAAR,GAAsB,CAAhF,GAAmF,IAAxG,CAboB,CAcpB;;AACA,QAAIC,KAAK,GAAG/D,SAAS,CAACmD,WAAD,EAAcI,SAAd,CAArB;AAEA/C,IAAAA,SAAS,CAAC,EAAC,GAAGD,MAAJ;AAAa,SAAG;AAClByD,QAAAA,GAAG,EAAEb,WAAW,CAACc,QAAZ,EADa;AAElBzB,QAAAA,KAAK,EAAEuB,KAAK,CAACG,WAFK;AAGlBzB,QAAAA,GAAG,EAAEsB,KAAK,CAACI,SAHO;AAIlBP,QAAAA,GAAG,EAAEP,SAAS,CAACO,GAAV,GAAgBJ,YAAY,CAACI,GAA7B,GAAmCL,SAAS,CAACtB,SAA7C,GAAyD,CAJ5C;AAKlBmC,QAAAA,EAAE,EAAElE,MAAM;AALQ;AAAhB,KAAD,CAAT;AAQH,GAzBD;AA2BA;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAAS2C,iBAAT,CAA2BL,KAA3B,EAAkCC,GAAlC,EAAuC;AAEnC,QAAI4B,EAAE,GAAGxD,QAAQ,CAACS,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAAT;AAEA,QAAIgD,KAAK,GAAGzD,QAAQ,CAAC0D,WAAT,EAAZ;AACAD,IAAAA,KAAK,CAACE,kBAAN,CAAyBH,EAAzB;AACA,QAAII,SAAS,GAAGC,cAAc,CAACL,EAAD,CAA9B;AACA,QAAIM,UAAU,GAAG,KAAjB;AACA,QAAIC,SAAS,GAAG,CAAhB;AAAA,QAAmBC,YAAnB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,QAAhB,EAA0BA,QAAQ,GAAGN,SAAS,CAACK,CAAC,EAAF,CAA9C,GAAuD;AACnDD,MAAAA,YAAY,GAAGD,SAAS,GAAGG,QAAQ,CAACpC,MAApC;;AACA,UAAI,CAACgC,UAAD,IAAenC,KAAK,IAAIoC,SAAxB,KAAsCpC,KAAK,GAAGqC,YAAR,IAAyBrC,KAAK,IAAIqC,YAAT,IAAyBC,CAAC,IAAIL,SAAS,CAAC9B,MAAvG,CAAJ,EAAqH;AACjH2B,QAAAA,KAAK,CAACU,QAAN,CAAeD,QAAf,EAAyBvC,KAAK,GAAGoC,SAAjC;AACAD,QAAAA,UAAU,GAAG,IAAb;AACH;;AACD,UAAIA,UAAU,IAAIlC,GAAG,IAAIoC,YAAzB,EAAuC;AACnCP,QAAAA,KAAK,CAACW,MAAN,CAAaF,QAAb,EAAuBtC,GAAG,GAAGmC,SAA7B;AACA;AACH;;AACDA,MAAAA,SAAS,GAAGC,YAAZ;AACH;;AAED,QAAIK,GAAG,GAAGjC,MAAM,CAACC,YAAP,EAAV;AACAgC,IAAAA,GAAG,CAACC,eAAJ;AACAD,IAAAA,GAAG,CAACE,QAAJ,CAAad,KAAb,EAzBmC,CA2BnC;;AAEA,aAASI,cAAT,CAAwBW,IAAxB,EAA8B;AAC1B,UAAIZ,SAAS,GAAG,EAAhB;;AACA,UAAIY,IAAI,CAACC,QAAL,KAAkB,CAAtB,EAAyB;AACrBb,QAAAA,SAAS,CAACc,IAAV,CAAeF,IAAf;AACH,OAFD,MAEO;AACH,YAAIG,QAAQ,GAAGH,IAAI,CAACI,UAApB;;AACA,aAAK,IAAIX,CAAC,GAAG,CAAR,EAAWY,GAAG,GAAGF,QAAQ,CAAC7C,MAA/B,EAAuCmC,CAAC,GAAGY,GAA3C,EAAgD,EAAEZ,CAAlD,EAAqD;AACjDL,UAAAA,SAAS,CAACc,IAAV,CAAeI,KAAf,CAAqBlB,SAArB,EAAgCC,cAAc,CAACc,QAAQ,CAACV,CAAD,CAAT,CAA9C;AACH;AACJ;;AACD,aAAOL,SAAP;AACH;AACJ,GAhKmC,CAkKpC;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAImB,eAAJ;;AACA,QAAMC,QAAQ,GAAG,CAACnE,CAAD,EAAIoD,CAAJ,EAAOgB,IAAP,KAAgB;AAC7B;AACAC,IAAAA,YAAY,CAACH,eAAD,CAAZ;AACA,QAAI,CAAClE,CAAC,CAACG,MAAF,CAASmE,KAAd,EAAqB;AACrBJ,IAAAA,eAAe,GAAG9D,UAAU,CAAC,MAAM;AAC/BnB,MAAAA,QAAQ,CAACb,mBAAmB,CAAC;AAACgG,QAAAA,IAAI,EAAEA,IAAP;AAAa9B,QAAAA,GAAG,EAAEtC,CAAC,CAACG,MAAF,CAASmE;AAA3B,OAAD,CAApB,CAAR,CACKC,IADL,CACWC,GAAD,IAAS;AACX,YAAIA,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoBzD,MAApB,KAA+B,CAAnC,EAAsC;AAClC9B,UAAAA,QAAQ,CAACS,sBAAT,CAAgC,kBAAhC,EAAoDwD,CAApD,EAAuD7D,KAAvD,CAA6DoF,MAA7D,GAAsE,eAAtE;AACA,iBAAOxF,QAAQ,CAACS,sBAAT,CAAgC,oBAAhC,EAAsDwD,CAAtD,EAAyDkB,KAAzD,GAAiE,2BAAyBE,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoBzD,MAArH;AACH,SAJU,CAKX;;;AACA,YAAI2D,MAAM,GAAG,CAAC,GAAG7F,SAAJ,CAAb,CANW,CAOX;;AACA,YAAI8F,SAAS,GAAG,EAAC,GAAGD,MAAM,CAACxB,CAAD,CAAV;AAAe0B,UAAAA,OAAO,EAAE9E,CAAC,CAACG,MAAF,CAASmE;AAAjC,SAAhB;AACAM,QAAAA,MAAM,CAACxB,CAAD,CAAN,GAAYyB,SAAZ,CATW,CAUX;;AACA7F,QAAAA,YAAY,CAAC4F,MAAD,CAAZ,CAXW,CAYX;;AACAzF,QAAAA,QAAQ,CAACS,sBAAT,CAAgC,oBAAhC,EAAsDwD,CAAtD,EAAyDkB,KAAzD,GAAiEE,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,CAAjE,CAbW,CAcX;;AACAvF,QAAAA,QAAQ,CAACS,sBAAT,CAAgC,kBAAhC,EAAoDwD,CAApD,EAAuD7D,KAAvD,CAA6DoF,MAA7D,GAAsE,MAAtE;AACH,OAjBL,EAkBKI,KAlBL,CAkBYC,GAAD,IAAS;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,OApBL;AAqBH,KAtB2B,EAsBzB,IAtByB,CAA5B;AAuBH,GA3BD;AA6BA;AACJ;AACA;AACA;AACA;AACA;;;AACI,QAAMG,SAAS,GAAI/B,CAAD,IAAO;AACrB,QAAIwB,MAAM,GAAG,CAAC,GAAG7F,SAAJ,CAAb,CADqB,CAErB;;AACA6F,IAAAA,MAAM,CAACQ,MAAP,CAAchC,CAAd,EAAiB,CAAjB,EAHqB,CAIrB;;AACApE,IAAAA,YAAY,CAAC4F,MAAD,CAAZ;AACH,GAND,CAnNoC,CA2NpC;;AAEA;AACJ;AACA;AACA;AACA;;;AACI,QAAMS,YAAY,GAAG,MAAM;AACvB;AACA,UAAMC,gBAAgB,GAAGvG,SAAS,CAAC6B,MAAV,CAAiB,CAACC,IAAD,EAAO0E,KAAP,KAAiB,CAAC1E,IAAI,CAACiE,OAAN,IAAiBjE,IAAI,CAACiE,OAAL,KAAiB,EAApE,CAAzB;AACA,QAAIQ,gBAAgB,CAACrE,MAAjB,GAA0B,CAA9B,EAAiC,OAAOC,KAAK,CAAC,6BAAD,CAAZ,CAHV,CAIvB;;AACAjC,IAAAA,QAAQ,CAACZ,iBAAiB,EAAlB,CAAR,CACKkG,IADL,CACWC,GAAD,IAAS,CAEd,CAHL,EAIKO,KAJL,CAIYC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBM,KAAnB;AACH,KANL;AAQH,GAbD;AAeA;AACJ;AACA;;;AACI,QAAMC,WAAW,GAAG,MAAM,CAEzB,CAFD,CApPoC,CAwPpC;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,OAAO,EAAE1F,cAAvC;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,oDAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,OAAO,EAAGC,CAAD,IAAO;AAACD,UAAAA,cAAc,CAACC,CAAD,EAAI,IAAJ,CAAd;AAAwB,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAgD,QAAA,SAAS,EAAEqB,QAA3D;AAAqE,QAAA,QAAQ,EAAGrB,CAAD,IAAOK,UAAU,CAACL,CAAD,EAAI,OAAJ,CAAhG;AAAA,mBACKpB,QAAQ,CAAC8G,GADd,eAEI;AAAK,UAAA,EAAE,EAAC,wBAAR;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,aAAf;AAA6B,YAAA,OAAO,EAAEhF,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAQI;AAAK,QAAA,SAAS,EAAC,oCAAf;AAAoD,QAAA,QAAQ,EAAGV,CAAD,IAAOK,UAAU,CAACL,CAAD,EAAI,SAAJ,CAA/E;AAAA,gCACI;AAAK,UAAA,EAAE,EAAC,uBAAR;AAAA,oBAEIjB,SAAS,CAACkC,MAAV,GAAmB,CAAnB,GACIlC,SAAS,CAAC4G,GAAV,CAAc,CAAC9E,IAAD,EAAOuC,CAAP,KAAa;AACvB,gCAAO;AAAK,cAAA,SAAS,EAAC,kBAAf;AAAkC,cAAA,EAAE,EAAEvC,IAAI,CAAC6B,EAA3C;AAA+C,cAAA,KAAK,EAAE;AAACR,gBAAAA,GAAG,EAACrB,IAAI,CAACqB,GAAL,GAAS;AAAd,eAAtD;AAAA,sCACH;AAAO,gBAAA,WAAW,EAAC,SAAnB;AAA6B,gBAAA,SAAS,EAAC,oBAAvC;AAA4D,gBAAA,QAAQ,EAAGlC,CAAD,IAAOmE,QAAQ,CAACnE,CAAD,EAAIoD,CAAJ,EAAO,IAAP;AAArF;AAAA;AAAA;AAAA;AAAA,sBADG,eAEH;AAAO,gBAAA,WAAW,EAAC,WAAnB;AAA+B,gBAAA,SAAS,EAAC,oBAAzC;AAA8D,gBAAA,QAAQ;AAAtE;AAAA;AAAA;AAAA;AAAA,sBAFG,eAGH;AAAK,gBAAA,SAAS,EAAC,iBAAf;AAAiC,gBAAA,OAAO,EAAE,MAAM+B,SAAS,CAAC/B,CAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHG;AAAA,eAAgFA,CAAhF;AAAA;AAAA;AAAA;AAAA,oBAAP;AAKH,WAND,CADJ,gBASI;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXR;AAAA;AAAA;AAAA;AAAA,gBADJ,EAgBMrE,SAAS,CAACkC,MAAV,GAAmB,CAAnB,iBAAwB;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAqC,UAAA,OAAO,EAAE,MAAMoE,YAAY,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhB9B;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH,CAzRD;;GAAM3G,M;UAKeD,W;;;KALfC,M;AA2RN,eAAeA,MAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport '../../../../styles/shared/editor/editor.css';\nimport '../../../../styles/shared/fadein.css';\n\nimport {codeCompletionAsync, compareCodesAsync} from \"../../../../slice/reviewSlice\";\n\nimport {fromRange} from \"xpath-range\";\nimport {v4 as uuidv4} from \"uuid\";\n\nimport {useDispatch} from \"react-redux\";\n\nconst Editor = ({ close, taskData }) => {\n\n    const [selTxt, setSelTxt] = useState({})\n    const [tempCodes, setTempCodes] = useState([])\n\n    const dispatch = useDispatch();\n\n    /**\n     * @function (01) get the dark background, the content wrapper and the inputs\n     *           (02) increase the dark background opacity\n     *           (03) fade up the content wrapper\n     *           =============\n     *           (04) ensure that the code display has the same length as the overflow text\n     *           (05) ensure that the empty codes text is centered\n     */\n    useEffect(() => {\n        //01\n        let bg = document.querySelector('.menu_dark_bg'),\n            content = document.querySelector('.create_input_wrapper'),\n            input = document.querySelector('.create_input');\n        //02\n        bg.style.cssText = \"opacity: 100%\";\n        //03\n        content.style.marginTop = \"0\";\n        //04\n        document.getElementById('internal_code_display').style.height = document.getElementsByClassName('code_input')[0].scrollHeight+'px';\n        //05\n        document.getElementsByClassName('empty_editor')[0].style.height = document.getElementsByClassName('code_input')[0].offsetHeight+'px'\n    }, [])\n\n    /**\n     * @function (01) get the background and content\n     *           (02) return if user clicked on the content\n     *           (03) user clicked outside of content - hide\n     *           (04) after timeout set state again to hidden\n     */\n    const hideCreateView = (e, forced) => {\n        //01\n        let bg = document.querySelector('.menu_dark_bg'),\n            content = document.querySelector('.create_input_wrapper');\n        //02\n        if (!forced && content.contains(e.target)) return;\n        //03\n        bg.style.cssText = \"opacity: 0%\";\n        content.style.marginTop = \"150vh\";\n        //04\n        setTimeout(() => close(), 350)\n    };\n\n    /**\n     * @function (01) define the target by choosing the complementary of the scrolled div\n     *           (02) assign scroll toÃ¼ and scroll left to the target based on the event scrolled position\n     */\n    const syncScroll = (e, origin) => {\n        //01\n        const target = origin === 'display' ? document.getElementsByClassName('code_input')[0] : document.getElementsByClassName('code_display')[0]\n        //02\n        target.scrollTop = e.currentTarget.scrollTop;\n        target.scrollLeft = e.currentTarget.scrollLeft;\n    }\n\n    //====================================================================\n\n    /**\n     * @function (01) check that there is no overlapping regarding the codes\n     *           (02) highlight the code\n     *           (03) push into data structure (updates the code overview on the right side)\n     */\n    const addCode = () => {\n        //01\n        let startOverlapCheck = tempCodes.filter(code => selTxt.start > code.start && selTxt.start < code.end)\n        let endOverlapCheck = tempCodes.filter(code => selTxt.end < code.end && selTxt.end > code.start)\n        if (startOverlapCheck.length > 0 || endOverlapCheck.length > 0) return alert('No overlaps possbile')\n        //02\n        setSelectionRange(selTxt.start, selTxt.end)\n        //highlight(\"yellow\");\n        //03\n        setTempCodes(currentCodes => [...currentCodes, selTxt]);\n    }\n\n    /**\n     * @function (01) get all selects and positions\n     *           (02) if only cursor change takes place only hide the tooltip\n     *           (03) reposition tooltip\n     *           (04) set selected text state\n     */\n    const selector = (e) => {\n        //01\n        let select = window.getSelection(),\n            selectRange = select.getRangeAt(0),\n            selectPos = selectRange.getBoundingClientRect(),\n            codeInput = document.getElementsByClassName('code_input')[0],\n            codeInputPos = codeInput.getBoundingClientRect(),\n            tooltip = document.getElementById('tooltip_editor_wrapper');\n        //02\n        if (selectPos.width < 1) return tooltip.style.display = \"none\";\n        //03\n        tooltip.style.display = \"inline\";\n        tooltip.style.top = (selectPos.top - codeInputPos.top - tooltip.offsetHeight - 10 + codeInput.scrollTop)+'px';\n        tooltip.style.left = (selectPos.left - codeInputPos.left + selectPos.width/2 - tooltip.offsetWidth / 2)+'px';\n        //04\n        let xpath = fromRange(selectRange, codeInput)\n\n        setSelTxt({...selTxt,  ...{\n                val: selectRange.toString(),\n                start: xpath.startOffset,\n                end: xpath.endOffset,\n                top: selectPos.top - codeInputPos.top + codeInput.scrollTop - 5,\n                id: uuidv4()\n            },\n        })\n    }\n\n    /**\n     * @function (01)\n     *           (02)\n     * @param start\n     * @param end\n     */\n    function setSelectionRange(start, end) {\n\n        let el = document.getElementsByClassName('code_input')[0];\n\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        var textNodes = getTextNodesIn(el);\n        var foundStart = false;\n        var charCount = 0, endCharCount;\n\n        for (var i = 0, textNode; textNode = textNodes[i++]; ) {\n            endCharCount = charCount + textNode.length;\n            if (!foundStart && start >= charCount && (start < endCharCount || (start == endCharCount && i <= textNodes.length))) {\n                range.setStart(textNode, start - charCount);\n                foundStart = true;\n            }\n            if (foundStart && end <= endCharCount) {\n                range.setEnd(textNode, end - charCount);\n                break;\n            }\n            charCount = endCharCount;\n        }\n\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n        //Helper functions\n\n        function getTextNodesIn(node) {\n            var textNodes = [];\n            if (node.nodeType === 3) {\n                textNodes.push(node);\n            } else {\n                var children = node.childNodes;\n                for (var i = 0, len = children.length; i < len; ++i) {\n                    textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n                }\n            }\n            return textNodes;\n        }\n    }\n\n    //====================================================================\n\n    /**\n     * @function (00) wait until typing ended and dispatch send to backend for code completion and wait - if more than one is found throw error\n     *           (01) duplicate the array\n     *           (02) find the array entry by index\n     *           (03) add code to this entry\n     *           (04) add the description\n     *           (05) indicate that this code is ok -> remove any border color\n     * @param e is the event\n     * @param i is the index of the array element which is\n     * @param type either id or desc of the code - required for the autocompletion\n     */\n    let typingTimerEdit;\n    const editCode = (e, i, type) => {\n        //00\n        clearTimeout(typingTimerEdit);\n        if (!e.target.value) return;\n        typingTimerEdit = setTimeout(() => {\n            dispatch(codeCompletionAsync({type: type, val: e.target.value}))\n                .then((res) => {\n                    if (res.payload.matches.length !== 1) {\n                        document.getElementsByClassName('ind_code_display')[i].style.border = \"1px solid red\";\n                        return document.getElementsByClassName('large_code_section')[i].value = 'Zu viele Ergebnisse - '+res.payload.matches.length\n                    }\n                    //01\n                    let newArr = [...tempCodes];\n                    //02\n                    let mergedObj = {...newArr[i], icdCode: e.target.value}\n                    newArr[i] = mergedObj;\n                    //03\n                    setTempCodes(newArr);\n                    //04\n                    document.getElementsByClassName('large_code_section')[i].value = res.payload.matches[0][2]\n                    //05\n                    document.getElementsByClassName('ind_code_display')[i].style.border = \"none\";\n                })\n                .catch((err) => {\n                    console.log(err)\n                });\n        }, 1000);\n    }\n\n    /**\n     * @function (01) duplicate the array\n     *           (02) splice the array\n     *           (03) set the new temp codes\n     * @param i index of the highlight which is deleted\n     */\n    const removeTxt = (i) => {\n        let newArr = [...tempCodes];\n        //02\n        newArr.splice(i, 1);\n        //03\n        setTempCodes(newArr);\n    }\n\n    // ====================================================================\n\n    /**\n     * @function (01) check if all temp codes were assigned - if not proceed and let user assign icd 10 code\n     *           (02) upload codes to backend and perform server side comparison\n     *           (03) once finished jump to the analytics page where detailed information can be obtained\n     */\n    const compareCodes = () => {\n        //01\n        const nonFinishedCodes = tempCodes.filter((code, index) => !code.icdCode || code.icdCode === \"\")\n        if (nonFinishedCodes.length > 0) return alert('not all codes were assigned');\n        //02\n        dispatch(compareCodesAsync())\n            .then((res) => {\n\n            })\n            .catch((err) => {\n                console.log('err', error)\n            })\n\n    }\n\n    /**\n     * @function\n     */\n    const proposeCode = () => {\n\n    }\n\n    //====================================================================\n\n    return (\n        <div className=\"menu_dark_bg\" onClick={hideCreateView}>\n            <div className=\"create_input_wrapper enlarged_create_input_wrapper\">\n                <div className=\"create_input_hide\" onClick={(e) => {hideCreateView(e, true)}}>X</div>\n                <div className=\"code_input enlarged_code_input\" onMouseUp={selector} onScroll={(e) => syncScroll(e, 'input')}>\n                    {taskData.txt}\n                    <div id=\"tooltip_editor_wrapper\">\n                        <div className=\"tooltip_btn\" onClick={addCode}>Code hinzufÃ¼gen</div>\n                    </div>\n                </div>\n                <div className=\"code_display enlarged_code_display\" onScroll={(e) => syncScroll(e, 'display')}>\n                    <div id=\"internal_code_display\">\n                    {\n                        tempCodes.length > 0 ? (\n                            tempCodes.map((code, i) => {\n                                return <div className=\"ind_code_display\" id={code.id} style={{top:code.top+'px'}} key={i}>\n                                    <input placeholder=\"Code ID\" className=\"small_code_section\" onChange={(e) => editCode(e, i, 'id')}/>\n                                    <input placeholder=\"Code Desc\" className=\"large_code_section\" readOnly/>\n                                    <div className=\"remove_code_btn\" onClick={() => removeTxt(i)}>X</div>\n                                </div>;\n                            })\n                        ) : (\n                            <div className=\"empty_editor\">Vergebe Codes</div>\n                            )\n                    }\n                    </div>\n                    { tempCodes.length > 0 && <div className=\"student_compare_btn\" onClick={() => compareCodes()}>Vergleichen</div> }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Editor;\n"]},"metadata":{},"sourceType":"module"}