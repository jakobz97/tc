{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/main/student/editor/Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport '../../../../styles/main/student/editor/editor.css';\nimport '../../../../styles/shared/fadein.css';\nimport { codeCompletionAsync } from \"../../../../slice/reviewSlice\";\nimport { fromRange } from \"xpath-range\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = _ref => {\n  _s();\n\n  let {\n    close,\n    taskData\n  } = _ref;\n  const [selTxt, setSelTxt] = useState({});\n  const [tempCodes, setTempCodes] = useState([]);\n  const [finalUploadStage, setFinalUploadStage] = useState(false);\n  const dispatch = useDispatch();\n  /**\n   * @function (01) get the dark background, the content wrapper and the inputs\n   *           (02) increase the dark background opacity\n   *           (03) fade up the content wrapper with an animation and set focus on the input\n   */\n\n  useEffect(() => {\n    //01\n    let bg = document.querySelector('.menu_dark_bg'),\n        content = document.querySelector('.create_input_wrapper'),\n        input = document.querySelector('.create_input'); //02\n\n    bg.style.cssText = \"opacity: 100%\"; //03\n\n    content.style.marginTop = \"0\";\n  }, []);\n  /**\n   * @function (01) get the background and content\n   *           (02) return if user clicked on the content\n   *           (03) user clicked outside of content - hide\n   *           (04) after timeout set state again to hidden\n   */\n\n  const hideCreateView = (e, forced) => {\n    //01\n    let bg = document.querySelector('.menu_dark_bg'),\n        content = document.querySelector('.create_input_wrapper'); //02\n\n    if (!forced && content.contains(e.target)) return; //03\n\n    bg.style.cssText = \"opacity: 0%\";\n    content.style.marginTop = \"150vh\"; //04\n\n    setTimeout(() => close(), 350);\n  }; //====================================================================\n\n  /**\n   * @function (01) check that there is no overlapping regarding the codes\n   *           (02) highlight the code\n   *           (03) push into data structure (updates the code overview on the right side)\n   */\n\n\n  const addCode = () => {\n    //1\n    //let startOverlapCheck = tempCodes.filter(code => code.start == filter.name && code.address == filter.address)\n    //let endOverlapCheck = tempCodes.filter(code => code.start == filter.name && code.address == filter.address)\n    //02\n    setSelectionRange(selTxt.start, selTxt.end); //highlight(\"yellow\");\n    //03\n\n    setTempCodes(currentCodes => [...currentCodes, selTxt]); //position absolute in the container on the height of the text\n    //store in state offset top\n  };\n  /**\n   * @function (01) get all selects and positions\n   *           (02) if only cursor change takes place only hide the tooltip\n   *           (03) reposition tooltip\n   *           (04) set selected text state\n   */\n\n\n  const selector = e => {\n    //01\n    let select = window.getSelection(),\n        selectRange = select.getRangeAt(0),\n        selectPos = selectRange.getBoundingClientRect(),\n        codeInput = document.getElementsByClassName('coder_input')[0],\n        codeInputPos = codeInput.getBoundingClientRect(),\n        tooltip = document.getElementById('tooltip_editor_wrapper'); //02\n\n    if (selectPos.width < 1) return tooltip.style.display = \"none\"; //03\n\n    tooltip.style.display = \"inline\";\n    tooltip.style.top = selectPos.top - codeInputPos.top - tooltip.offsetHeight - 10 + codeInput.scrollTop + 'px';\n    tooltip.style.left = selectPos.left - codeInputPos.left + selectPos.width / 2 - tooltip.offsetWidth / 2 + 'px'; //04\n\n    let xpath = fromRange(selectRange, codeInput);\n    setSelTxt({ ...selTxt,\n      ...{\n        val: selectRange.toString(),\n        start: xpath.startOffset,\n        end: xpath.endOffset,\n        id: uuidv4()\n      }\n    });\n  };\n  /**\n   * @function (01)\n   *           (02)\n   * @param start\n   * @param end\n   */\n\n\n  function setSelectionRange(start, end) {\n    let el = document.getElementsByClassName('coder_input')[0];\n    var range = document.createRange();\n    range.selectNodeContents(el);\n    var textNodes = getTextNodesIn(el);\n    var foundStart = false;\n    var charCount = 0,\n        endCharCount;\n\n    for (var i = 0, textNode; textNode = textNodes[i++];) {\n      endCharCount = charCount + textNode.length;\n\n      if (!foundStart && start >= charCount && (start < endCharCount || start == endCharCount && i <= textNodes.length)) {\n        range.setStart(textNode, start - charCount);\n        foundStart = true;\n      }\n\n      if (foundStart && end <= endCharCount) {\n        range.setEnd(textNode, end - charCount);\n        break;\n      }\n\n      charCount = endCharCount;\n    }\n\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range); //Helper functions\n\n    function getTextNodesIn(node) {\n      var textNodes = [];\n\n      if (node.nodeType === 3) {\n        textNodes.push(node);\n      } else {\n        var children = node.childNodes;\n\n        for (var i = 0, len = children.length; i < len; ++i) {\n          textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n        }\n      }\n\n      return textNodes;\n    }\n  } //====================================================================\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu_dark_bg\",\n    onClick: hideCreateView,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_input_wrapper enlarged_create_input_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create_input_hide\",\n        onClick: e => {\n          hideCreateView(e, true);\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"student_input\",\n        placeholder: \"Patientendokumentation\",\n        onSelect: selector,\n        children: [taskData.txt, /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"tooltip_editor_wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tooltip_btn\",\n            onClick: addCode,\n            children: \"Code hinzuf\\xFCgen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code_display\",\n        children: tempCodes.map((code, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {}, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"5oQoY30AeosVgt4+ewfmFa67//0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/main/student/editor/Editor.js"],"names":["React","useEffect","useState","codeCompletionAsync","fromRange","v4","uuidv4","useDispatch","Editor","close","taskData","selTxt","setSelTxt","tempCodes","setTempCodes","finalUploadStage","setFinalUploadStage","dispatch","bg","document","querySelector","content","input","style","cssText","marginTop","hideCreateView","e","forced","contains","target","setTimeout","addCode","setSelectionRange","start","end","currentCodes","selector","select","window","getSelection","selectRange","getRangeAt","selectPos","getBoundingClientRect","codeInput","getElementsByClassName","codeInputPos","tooltip","getElementById","width","display","top","offsetHeight","scrollTop","left","offsetWidth","xpath","val","toString","startOffset","endOffset","id","el","range","createRange","selectNodeContents","textNodes","getTextNodesIn","foundStart","charCount","endCharCount","i","textNode","length","setStart","setEnd","sel","removeAllRanges","addRange","node","nodeType","push","children","childNodes","len","apply","txt","map","code"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport '../../../../styles/main/student/editor/editor.css';\nimport '../../../../styles/shared/fadein.css';\n\nimport {codeCompletionAsync} from \"../../../../slice/reviewSlice\";\nimport {fromRange} from \"xpath-range\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {useDispatch} from \"react-redux\";\n\nconst Editor = ({ close, taskData }) => {\n\n    const [selTxt, setSelTxt] = useState({})\n    const [tempCodes, setTempCodes] = useState([])\n    const [finalUploadStage, setFinalUploadStage] = useState(false)\n\n    const dispatch = useDispatch();\n\n    /**\n     * @function (01) get the dark background, the content wrapper and the inputs\n     *           (02) increase the dark background opacity\n     *           (03) fade up the content wrapper with an animation and set focus on the input\n     */\n    useEffect(() => {\n        //01\n        let bg = document.querySelector('.menu_dark_bg'),\n            content = document.querySelector('.create_input_wrapper'),\n            input = document.querySelector('.create_input');\n        //02\n        bg.style.cssText = \"opacity: 100%\";\n        //03\n        content.style.marginTop = \"0\";\n    }, [])\n\n    /**\n     * @function (01) get the background and content\n     *           (02) return if user clicked on the content\n     *           (03) user clicked outside of content - hide\n     *           (04) after timeout set state again to hidden\n     */\n    const hideCreateView = (e, forced) => {\n        //01\n        let bg = document.querySelector('.menu_dark_bg'),\n            content = document.querySelector('.create_input_wrapper');\n        //02\n        if (!forced && content.contains(e.target)) return;\n        //03\n        bg.style.cssText = \"opacity: 0%\";\n        content.style.marginTop = \"150vh\";\n        //04\n        setTimeout(() => close(), 350)\n    };\n\n    //====================================================================\n\n\n    /**\n     * @function (01) check that there is no overlapping regarding the codes\n     *           (02) highlight the code\n     *           (03) push into data structure (updates the code overview on the right side)\n     */\n    const addCode = () => {\n        //1\n        //let startOverlapCheck = tempCodes.filter(code => code.start == filter.name && code.address == filter.address)\n        //let endOverlapCheck = tempCodes.filter(code => code.start == filter.name && code.address == filter.address)\n\n        //02\n        setSelectionRange(selTxt.start, selTxt.end)\n        //highlight(\"yellow\");\n\n        //03\n        setTempCodes(currentCodes => [...currentCodes, selTxt]);\n        //position absolute in the container on the height of the text\n        //store in state offset top\n    }\n\n    /**\n     * @function (01) get all selects and positions\n     *           (02) if only cursor change takes place only hide the tooltip\n     *           (03) reposition tooltip\n     *           (04) set selected text state\n     */\n    const selector = (e) => {\n        //01\n        let select = window.getSelection(),\n            selectRange = select.getRangeAt(0),\n            selectPos = selectRange.getBoundingClientRect(),\n            codeInput = document.getElementsByClassName('coder_input')[0],\n            codeInputPos = codeInput.getBoundingClientRect(),\n            tooltip = document.getElementById('tooltip_editor_wrapper');\n        //02\n        if (selectPos.width < 1) return tooltip.style.display = \"none\";\n        //03\n        tooltip.style.display = \"inline\";\n        tooltip.style.top = (selectPos.top - codeInputPos.top - tooltip.offsetHeight - 10 + codeInput.scrollTop)+'px';\n        tooltip.style.left = (selectPos.left - codeInputPos.left + selectPos.width/2 - tooltip.offsetWidth / 2)+'px';\n        //04\n        let xpath = fromRange(selectRange, codeInput)\n\n        setSelTxt({...selTxt,  ...{\n                val: selectRange.toString(),\n                start: xpath.startOffset,\n                end: xpath.endOffset,\n                id: uuidv4()\n            },\n        })\n    }\n\n    /**\n     * @function (01)\n     *           (02)\n     * @param start\n     * @param end\n     */\n    function setSelectionRange(start, end) {\n\n        let el = document.getElementsByClassName('coder_input')[0];\n\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        var textNodes = getTextNodesIn(el);\n        var foundStart = false;\n        var charCount = 0, endCharCount;\n\n        for (var i = 0, textNode; textNode = textNodes[i++]; ) {\n            endCharCount = charCount + textNode.length;\n            if (!foundStart && start >= charCount && (start < endCharCount || (start == endCharCount && i <= textNodes.length))) {\n                range.setStart(textNode, start - charCount);\n                foundStart = true;\n            }\n            if (foundStart && end <= endCharCount) {\n                range.setEnd(textNode, end - charCount);\n                break;\n            }\n            charCount = endCharCount;\n        }\n\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n        //Helper functions\n\n        function getTextNodesIn(node) {\n            var textNodes = [];\n            if (node.nodeType === 3) {\n                textNodes.push(node);\n            } else {\n                var children = node.childNodes;\n                for (var i = 0, len = children.length; i < len; ++i) {\n                    textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n                }\n            }\n            return textNodes;\n        }\n    }\n\n\n\n\n\n    //====================================================================\n\n\n\n    return (\n        <div className=\"menu_dark_bg\" onClick={hideCreateView}>\n            <div className=\"create_input_wrapper enlarged_create_input_wrapper\">\n                <div className=\"create_input_hide\" onClick={(e) => {hideCreateView(e, true)}}>X</div>\n\n                <div className=\"student_input\" placeholder=\"Patientendokumentation\"  onSelect={selector}>\n                    {taskData.txt}\n                    <div id=\"tooltip_editor_wrapper\">\n                        <div className=\"tooltip_btn\" onClick={addCode}>Code hinzufügen</div>\n                    </div>\n                </div>\n                <div className=\"code_display\">\n                    {tempCodes.map((code, i) => {\n                        return <div key={i}>\n                            {/*code.val\n                            <input placeholder=\"Code ID\" onChange={(e) => editCode(e, i, 'id')}/>\n                            <input placeholder=\"Code Desc\" onChange={(e) => editCode(e, i, 'desc')}/>\n                            <div className=\"remove\" onClick={() => removeTxt(i)}>Löschen</div>*/}\n                        </div>;\n                    })}\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default Editor;\n"]},"metadata":{},"sourceType":"module"}