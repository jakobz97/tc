{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, logout, signup } from '../services/auth.service';\nconst initialState = {\n  loggedIn: false,\n  userType: \"customer\" //todo change back again to empty\n\n};\nexport const loginAsync = createAsyncThunk('auth/login', async credentials => {\n  const response = await login(credentials);\n  return response.data;\n});\nexport const signUpAsync = createAsyncThunk('auth/signup', async signupData => {\n  console.log('from slice', signupData);\n  return;\n  const response = await signup(signupData);\n  return response;\n});\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  const response = await logout();\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setLoggedIn: (state, action) => {\n      state.loggedIn = action.payload;\n    },\n    setUserType: (state, action) => {\n      state.userType = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      console.log('loaded');\n      console.log('loaded', action.payload);\n    }).addCase(signUpAsync.fulfilled, (state, action) => {\n      console.log('signed up');\n      console.log('signed up', action.payload);\n    }).addCase(logoutAsync.fulfilled, (state, action) => {\n      console.log('loaded logout');\n    });\n  }\n});\nexport const {\n  setLoggedIn,\n  setMessage,\n  setUserType\n} = authSlice.actions;\nexport const selectIsLoggedIn = state => state.auth.loggedIn;\nexport const selectMessage = state => state.auth.message;\nexport const selectUserType = state => state.auth.userType;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/slice/authSlice.js"],"names":["createAsyncThunk","createSlice","login","logout","signup","initialState","loggedIn","userType","loginAsync","credentials","response","data","signUpAsync","signupData","console","log","logoutAsync","authSlice","name","reducers","setLoggedIn","state","action","payload","setUserType","extraReducers","builder","addCase","fulfilled","setMessage","actions","selectIsLoggedIn","auth","selectMessage","message","selectUserType","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,MAAvB,QAAoC,0BAApC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,KADO;AAEjBC,EAAAA,QAAQ,EAAE,UAFO,CAEI;;AAFJ,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CACtC,YADsC,EAEtC,MAAOS,WAAP,IAAuB;AACnB,QAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACO,WAAD,CAA5B;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACH,CALqC,CAAnC;AAQP,OAAO,MAAMC,WAAW,GAAGZ,gBAAgB,CACvC,aADuC,EAEvC,MAAOa,UAAP,IAAsB;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AACA;AACA,QAAMH,QAAQ,GAAG,MAAMN,MAAM,CAACS,UAAD,CAA7B;AACA,SAAOH,QAAP;AACH,CAPsC,CAApC;AAUP,OAAO,MAAMM,WAAW,GAAGhB,gBAAgB,CACvC,aADuC,EAEvC,YAAY;AACR,QAAMU,QAAQ,GAAG,MAAMP,MAAM,EAA7B;AACA,SAAOO,QAAQ,CAACC,IAAhB;AACH,CALsC,CAApC;AAQP,OAAO,MAAMM,SAAS,GAAGhB,WAAW,CAAC;AACjCiB,EAAAA,IAAI,EAAE,MAD2B;AAEjCb,EAAAA,YAFiC;AAGjCc,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACf,QAAN,GAAiBgB,MAAM,CAACC,OAAxB;AACH,KAHK;AAINC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACd,QAAN,GAAiBe,MAAM,CAACC,OAAxB;AACH;AANK,GAHuB;AAWjCE,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACanB,UAAU,CAACoB,SADxB,EACmC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC9CR,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBO,MAAM,CAACC,OAA7B;AACH,KAJL,EAKKI,OALL,CAKaf,WAAW,CAACgB,SALzB,EAKoC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC/CR,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBO,MAAM,CAACC,OAAhC;AACH,KARL,EASKI,OATL,CASaX,WAAW,CAACY,SATzB,EASoC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC/CR,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,KAXL;AAYH;AAxBgC,CAAD,CAA7B;AA2BP,OAAO,MAAM;AAACK,EAAAA,WAAD;AAAcS,EAAAA,UAAd;AAA0BL,EAAAA;AAA1B,IAAyCP,SAAS,CAACa,OAAzD;AAEP,OAAO,MAAMC,gBAAgB,GAAIV,KAAD,IAAWA,KAAK,CAACW,IAAN,CAAW1B,QAA/C;AACP,OAAO,MAAM2B,aAAa,GAAIZ,KAAD,IAAWA,KAAK,CAACW,IAAN,CAAWE,OAA5C;AACP,OAAO,MAAMC,cAAc,GAAId,KAAD,IAAWA,KAAK,CAACW,IAAN,CAAWzB,QAA7C;AAEP,eAAeU,SAAS,CAACmB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {login, logout, signup} from '../services/auth.service';\n\nconst initialState = {\n    loggedIn: false,\n    userType: \"customer\" //todo change back again to empty\n};\n\nexport const loginAsync = createAsyncThunk(\n    'auth/login',\n    async (credentials) => {\n        const response = await login(credentials);\n        return response.data;\n    }\n);\n\nexport const signUpAsync = createAsyncThunk(\n    'auth/signup',\n    async (signupData) => {\n        console.log('from slice', signupData)\n        return\n        const response = await signup(signupData);\n        return response;\n    }\n);\n\nexport const logoutAsync = createAsyncThunk(\n    'auth/logout',\n    async () => {\n        const response = await logout();\n        return response.data;\n    }\n);\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        setLoggedIn: (state, action) => {\n            state.loggedIn = action.payload;\n        },\n        setUserType: (state, action) => {\n            state.userType = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(loginAsync.fulfilled, (state, action) => {\n                console.log('loaded');\n                console.log('loaded', action.payload)\n            })\n            .addCase(signUpAsync.fulfilled, (state, action) => {\n                console.log('signed up');\n                console.log('signed up', action.payload)\n            })\n            .addCase(logoutAsync.fulfilled, (state, action) => {\n                console.log('loaded logout');\n            });\n    },\n});\n\nexport const {setLoggedIn, setMessage, setUserType} = authSlice.actions;\n\nexport const selectIsLoggedIn = (state) => state.auth.loggedIn;\nexport const selectMessage = (state) => state.auth.message;\nexport const selectUserType = (state) => state.auth.userType;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}