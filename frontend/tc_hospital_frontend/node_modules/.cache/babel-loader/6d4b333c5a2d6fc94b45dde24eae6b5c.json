{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Documents/Start-up/restaurant/frontend/restaurant_spa/src/components/sub/ActiveOrderList.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport '../../styling/sub/ActiveOrderList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ActiveOrderList = _ref => {\n  let {\n    socket,\n    orderData\n  } = _ref;\n  //todo include the order data into the socket data -> merge both objects and then sort them\n\n  /*const [orders, setOrders] = useState({});\n  useEffect(() => {\n      const orderListener = (message) => {\n          setOrders((prevMessages) => {\n              const newMessages = {...prevMessages};\n              newMessages[message.id] = message;\n              return newMessages;\n          });\n      };\n       const deleteOrderListener = (messageID) => {\n          setOrders((prevMessages) => {\n              const newMessages = {...prevMessages};\n              delete newMessages[messageID];\n              return newMessages;\n          });\n      };\n       socket.on('message', orderListener);\n      socket.on('deleteMessage', deleteOrderListener);\n      socket.emit('getMessages');\n       return () => {\n          socket.off('message', orderListener);\n          socket.off('deleteMessage', deleteOrderListener);\n      };\n  }, [socket]);\n   //Helper functions\n   //todo order finished\n  //todo order aborted\n     */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"order_list_container\",\n    children: [...Object.values(orders)].sort((a, b) => a.time - b.time).map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order_container\",\n      title: `Sent at ${new Date(order.time).toLocaleTimeString()}`,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"user\",\n        children: [order.user.name, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"message\",\n        children: order.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"date\",\n        children: new Date(order.time).toLocaleTimeString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this)]\n    }, order.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ActiveOrderList;\nexport default ActiveOrderList;\n/*\n\n\n\nfunction Messages({ socket }) {\n    const [messages, setMessages] = useState({});\n\n    useEffect(() => {\n        const messageListener = (message) => {\n            setMessages((prevMessages) => {\n                const newMessages = {...prevMessages};\n                newMessages[message.id] = message;\n                return newMessages;\n            });\n        };\n\n        const deleteMessageListener = (messageID) => {\n            setMessages((prevMessages) => {\n                const newMessages = {...prevMessages};\n                delete newMessages[messageID];\n                return newMessages;\n            });\n        };\n\n        socket.on('message', messageListener);\n        socket.on('deleteMessage', deleteMessageListener);\n        socket.emit('getMessages');\n\n        return () => {\n            socket.off('message', messageListener);\n            socket.off('deleteMessage', deleteMessageListener);\n        };\n    }, [socket]);\n\n    return (\n        <div className=\"message-list\">\n            {[...Object.values(messages)]\n                .sort((a, b) => a.time - b.time)\n                .map((message) => (\n                    <div\n                        key={message.id}\n                        className=\"message-container\"\n                        title={`Sent at ${new Date(message.time).toLocaleTimeString()}`}\n                    >\n                        <span className=\"user\">{message.user.name}:</span>\n                        <span className=\"message\">{message.value}</span>\n                        <span className=\"date\">{new Date(message.time).toLocaleTimeString()}</span>\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Messages;\n\n\n\n\n\n\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveOrderList\");","map":{"version":3,"sources":["/Users/Jakob/Documents/Start-up/restaurant/frontend/restaurant_spa/src/components/sub/ActiveOrderList.js"],"names":["React","useState","useRef","useEffect","ActiveOrderList","socket","orderData","Object","values","orders","sort","a","b","time","map","order","Date","toLocaleTimeString","user","name","value","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,SAAjC,QAAiD,OAAjD;AAEA,OAAO,uCAAP;;;AAEA,MAAMC,eAAe,GAAG,QAAyB;AAAA,MAAxB;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAwB;AAE7C;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQI,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,cACK,CAAC,GAAGC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAJ,EACIC,IADJ,CACS,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAD9B,EAEIC,GAFJ,CAESC,KAAD,iBACD;AAEI,MAAA,SAAS,EAAC,iBAFd;AAGI,MAAA,KAAK,EAAG,WAAU,IAAIC,IAAJ,CAASD,KAAK,CAACF,IAAf,EAAqBI,kBAArB,EAA0C,EAHhE;AAAA,8BAKI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA,mBAAwBF,KAAK,CAACG,IAAN,CAAWC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAM,QAAA,SAAS,EAAC,SAAhB;AAAA,kBAA2BJ,KAAK,CAACK;AAAjC;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA,kBAAwB,IAAIJ,IAAJ,CAASD,KAAK,CAACF,IAAf,EAAqBI,kBAArB;AAAxB;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA,OACSF,KAAK,CAACM,EADf;AAAA;AAAA;AAAA;AAAA,YAHP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAzDD;;KAAMjB,e;AA2DN,eAAeA,eAAf;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\n\nimport '../../styling/sub/ActiveOrderList.css';\n\nconst ActiveOrderList = ({socket, orderData}) => {\n\n    //todo include the order data into the socket data -> merge both objects and then sort them\n\n    /*const [orders, setOrders] = useState({});\n    useEffect(() => {\n        const orderListener = (message) => {\n            setOrders((prevMessages) => {\n                const newMessages = {...prevMessages};\n                newMessages[message.id] = message;\n                return newMessages;\n            });\n        };\n\n        const deleteOrderListener = (messageID) => {\n            setOrders((prevMessages) => {\n                const newMessages = {...prevMessages};\n                delete newMessages[messageID];\n                return newMessages;\n            });\n        };\n\n        socket.on('message', orderListener);\n        socket.on('deleteMessage', deleteOrderListener);\n        socket.emit('getMessages');\n\n        return () => {\n            socket.off('message', orderListener);\n            socket.off('deleteMessage', deleteOrderListener);\n        };\n    }, [socket]);\n\n    //Helper functions\n\n    //todo order finished\n    //todo order aborted\n\n\n     */\n    return (\n        <div className=\"order_list_container\">\n            {[...Object.values(orders)]\n                .sort((a, b) => a.time - b.time)\n                .map((order) => (\n                    <div\n                        key={order.id}\n                        className=\"order_container\"\n                        title={`Sent at ${new Date(order.time).toLocaleTimeString()}`}\n                    >\n                        <span className=\"user\">{order.user.name}:</span>\n                        <span className=\"message\">{order.value}</span>\n                        <span className=\"date\">{new Date(order.time).toLocaleTimeString()}</span>\n                    </div>\n                ))\n            }\n        </div>\n    );\n};\n\nexport default ActiveOrderList;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\n\n\nfunction Messages({ socket }) {\n    const [messages, setMessages] = useState({});\n\n    useEffect(() => {\n        const messageListener = (message) => {\n            setMessages((prevMessages) => {\n                const newMessages = {...prevMessages};\n                newMessages[message.id] = message;\n                return newMessages;\n            });\n        };\n\n        const deleteMessageListener = (messageID) => {\n            setMessages((prevMessages) => {\n                const newMessages = {...prevMessages};\n                delete newMessages[messageID];\n                return newMessages;\n            });\n        };\n\n        socket.on('message', messageListener);\n        socket.on('deleteMessage', deleteMessageListener);\n        socket.emit('getMessages');\n\n        return () => {\n            socket.off('message', messageListener);\n            socket.off('deleteMessage', deleteMessageListener);\n        };\n    }, [socket]);\n\n    return (\n        <div className=\"message-list\">\n            {[...Object.values(messages)]\n                .sort((a, b) => a.time - b.time)\n                .map((message) => (\n                    <div\n                        key={message.id}\n                        className=\"message-container\"\n                        title={`Sent at ${new Date(message.time).toLocaleTimeString()}`}\n                    >\n                        <span className=\"user\">{message.user.name}:</span>\n                        <span className=\"message\">{message.value}</span>\n                        <span className=\"date\">{new Date(message.time).toLocaleTimeString()}</span>\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Messages;\n\n\n\n\n\n\n */\n"]},"metadata":{},"sourceType":"module"}