{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/tc/frontend/tc_hospital_frontend/src/components/coder/editor/Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { fromRange } from \"xpath-range\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Navbar from \"../../general/navbar/Navbar\";\nimport UploadFadeIn from \"./UploadFadeIn\";\nimport '../../../styles/shared/main.css';\nimport '../../../styles/shared/editor/editor.css';\nimport \"../../../slice/authSlice\";\nimport { codeCompletionAsync, uploadCodeAsync } from \"../../../slice/reviewSlice\";\nimport { history } from \"../../../helpers/history\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = () => {\n  _s();\n\n  const [insertTxtStage, setInsertTxtStage] = useState(true);\n  const [txt, setTxt] = useState(\"\");\n  const [selTxt, setSelTxt] = useState({});\n  const [tempCodes, setTempCodes] = useState([]);\n  const [finalUploadStage, setFinalUploadStage] = useState(false);\n  const dispatch = useDispatch(); //todo security checks\n\n  /**\n   * @function (01) ensure that the empty sign has the correct height\n   */\n\n  useEffect(() => {\n    //01\n    document.getElementsByClassName('empty_editor')[0].style.height = document.getElementsByClassName('code_input')[0].offsetHeight + 'px';\n  }, []);\n  /**\n   * @function (01) define the target by choosing the complementary of the scrolled div\n   *           (02) assign scroll toÃ¼ and scroll left to the target based on the event scrolled position\n   */\n\n  const syncScroll = (e, origin) => {\n    //01\n    const target = origin === 'display' ? document.getElementsByClassName('code_input')[0] : document.getElementsByClassName('code_display')[0]; //02\n\n    target.scrollTop = e.currentTarget.scrollTop;\n    target.scrollLeft = e.currentTarget.scrollLeft;\n  }; //==================================================\n\n  /**\n   * @function (01) check that there is no overlapping regarding the codes\n   *           (02) highlight the code\n   *           (03) push into data structure (updates the code overview on the right side)\n   */\n\n\n  const addCode = () => {\n    //01\n    let startOverlapCheck = tempCodes.filter(code => selTxt.start > code.start && selTxt.start < code.end);\n    let endOverlapCheck = tempCodes.filter(code => selTxt.end < code.end && selTxt.end > code.start); //todo check that this code has not been used yet\n\n    if (startOverlapCheck.length > 0 || endOverlapCheck.length > 0) return alert('No overlaps possbile'); //02\n\n    setSelectionRange(selTxt.start, selTxt.end); //highlight(\"yellow\");\n    //03\n\n    setTempCodes(currentCodes => [...currentCodes, selTxt]);\n  };\n  /**\n   * @function (00) wait until typing ended and dispatch send to backend for code completion and wait\n   *           (01) duplicate the array\n   *           (02) find the array entry by index\n   *           (03) add code to this entry\n   * @param e is the event\n   * @param i is the index of the array element which is\n   * @param type either id or desc of the code - required for the autocompletion\n   */\n\n\n  let typingTimerEdit;\n\n  const editCode = (e, i, type) => {\n    //00\n    clearTimeout(typingTimerEdit);\n    if (!e.target.value) return;\n    typingTimerEdit = setTimeout(() => {\n      dispatch(codeCompletionAsync({\n        type: type,\n        val: e.target.value\n      })).then(res => {\n        if (res.payload.matches.length !== 1) {\n          document.getElementsByClassName('ind_code_display')[i].style.border = \"1px solid red\";\n          return document.getElementsByClassName('large_code_section')[i].value = 'Zu viele Ergebnisse - ' + res.payload.matches.length;\n        } //01\n\n\n        let newArr = [...tempCodes]; //02\n\n        let mergedObj = { ...newArr[i],\n          icdCode: e.target.value,\n          icdCodeDesc: res.payload.matches[0][2]\n        };\n        newArr[i] = mergedObj; //03\n\n        setTempCodes(newArr); //04\n\n        document.getElementsByClassName('large_code_section')[i].value = res.payload.matches[0][2]; //05\n\n        document.getElementsByClassName('ind_code_display')[i].style.border = \"none\";\n      }).catch(err => {\n        console.log(err);\n      });\n    }, 1000);\n  };\n  /**\n   * @function (01) duplicate the array\n   *           (02) splice the array\n   *           (03) set the new temp codes\n   * @param i index of the highlight which is deleted\n   */\n\n\n  const removeTxt = i => {\n    let newArr = [...tempCodes]; //02\n\n    newArr.splice(i, 1); //03\n\n    setTempCodes(newArr);\n  }; //==================================================\n  //todo next section\n\n  /**\n   * @function (01) get all selects and positions\n   *           (02) if only cursor change takes place only hide the tooltip\n   *           (03) reposition tooltip\n   *           (04) set selected text state\n   */\n\n\n  const selector = e => {\n    //01\n    let select = window.getSelection(),\n        selectRange = select.getRangeAt(0),\n        selectPos = selectRange.getBoundingClientRect(),\n        codeInput = document.getElementsByClassName('code_input')[0],\n        codeInputPos = codeInput.getBoundingClientRect(),\n        tooltip = document.getElementById('tooltip_editor_wrapper'); //02\n\n    if (selectPos.width < 1) return tooltip.style.display = \"none\"; //03\n\n    tooltip.style.display = \"inline\";\n    tooltip.style.top = selectPos.top - codeInputPos.top - tooltip.offsetHeight - 10 + codeInput.scrollTop + 'px';\n    tooltip.style.left = selectPos.left - codeInputPos.left + selectPos.width / 2 - tooltip.offsetWidth / 2 + 'px'; //04\n\n    let xpath = fromRange(selectRange, codeInput);\n    setSelTxt({ ...selTxt,\n      ...{\n        val: selectRange.toString(),\n        start: xpath.startOffset,\n        end: xpath.endOffset,\n        id: uuidv4(),\n        top: selectPos.top - codeInputPos.top + codeInput.scrollTop - 5\n      }\n    });\n  };\n  /**\n   * @function (01)\n   *           (02)\n   * @param start\n   * @param end\n   */\n\n\n  function setSelectionRange(start, end) {\n    let el = document.getElementsByClassName('code_input')[0];\n    var range = document.createRange();\n    range.selectNodeContents(el);\n    var textNodes = getTextNodesIn(el);\n    var foundStart = false;\n    var charCount = 0,\n        endCharCount;\n\n    for (var i = 0, textNode; textNode = textNodes[i++];) {\n      endCharCount = charCount + textNode.length;\n\n      if (!foundStart && start >= charCount && (start < endCharCount || start == endCharCount && i <= textNodes.length)) {\n        range.setStart(textNode, start - charCount);\n        foundStart = true;\n      }\n\n      if (foundStart && end <= endCharCount) {\n        range.setEnd(textNode, end - charCount);\n        break;\n      }\n\n      charCount = endCharCount;\n    }\n\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range); //Helper functions\n\n    function getTextNodesIn(node) {\n      var textNodes = [];\n\n      if (node.nodeType === 3) {\n        textNodes.push(node);\n      } else {\n        var children = node.childNodes;\n\n        for (var i = 0, len = children.length; i < len; ++i) {\n          textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n        }\n      }\n\n      return textNodes;\n    }\n  }\n  /**\n   * @function\n   * @param colour\n   */\n\n\n  function highlight(colour) {\n    let range, sel;\n    sel = window.getSelection();\n\n    if (sel.rangeCount && sel.getRangeAt) {\n      range = sel.getRangeAt(0);\n    }\n\n    document.designMode = \"on\";\n    sel.removeAllRanges();\n    sel.addRange(range);\n    document.execCommand(\"BackColor\", false, colour);\n    document.designMode = \"off\";\n  } //==================================================\n\n  /**\n   * @function (01)\n   */\n\n\n  const startEditMode = () => {};\n  /**\n   * @function (00) check if the div has any type of input\n   *           (01) update the state of the of the insertTxtStage\n   *           (02) adjust the heights\n   */\n\n\n  const endEditMode = () => {\n    //00\n    if (txt === \"\") return alert('we need some text'); //01\n\n    setInsertTxtStage(false); //02\n\n    document.getElementById('internal_code_display').style.height = document.getElementsByClassName('code_input')[0].scrollHeight + 'px';\n  };\n  /**\n   * @function (01) update the current text\n   *           (02) if the text is empty\n   */\n\n\n  const addTxt = e => {\n    //01\n    setTxt(e.currentTarget.innerHTML); //02\n\n    if (e.currentTarget.innerHTML === \"\") e.currentTarget.innerHTML = \"copy & paste patient record and anonymize it\";\n  };\n  /**\n   * @function if the input only has the placeholder remove it temporarily\n   */\n\n\n  const focusTxtPlaceholder = e => {\n    alert(\"moin\");\n    if (e.currentTarget.innerHTML === \"copy & paste patient record and anonymize it\") e.currentTarget.innerHTML = \"\";\n  };\n  /**\n   * @function if the user leaves the input and it is empty insert the placeholder\n   */\n\n\n  const blurTxtPlaceholder = e => {\n    if (e.currentTarget.innerHTML === \"\") e.currentTarget.innerHTML = \"copy & paste patient record and anonymize it\";\n  }; //==================================================\n\n  /**\n   * @function (01) check if any codes were added - if not return + that every code has an icd code allocated\n   *           (02) fade in the final upload overview - where tags, difficulty, internal use and title are provided\n   */\n\n\n  const proceedUpload = () => {\n    //01\n    if (tempCodes.length < 1) return alert(\"please provide at least one code\");\n    if (tempCodes.filter(code => !code.hasOwnProperty('icdCode') || code.icdCode === \"\").length !== 0) return alert(\"allocate icd code\"); //02\n\n    setFinalUploadStage(true);\n  };\n  /**\n   * @function (01) prevent default\n   *           (02) create a merged object of text, codes\n   *           (03) upload via dispatch and wait for success\n   *           (04) on success clear the view and let user create a new\n   */\n\n\n  const uploadCodes = e => {\n    //01\n    e.preventDefault();\n    setFinalUploadStage(false); //02\n\n    let codeDataObj = {\n      initialCodes: tempCodes,\n      txt: txt,\n      ...Object.fromEntries(new FormData(e.target))\n    }; //03\n\n    dispatch(uploadCodeAsync(codeDataObj)).then(res => {\n      console.log(res.payload); //04\n    }).catch(err => {\n      console.log('error', err);\n    });\n  }; // ==========================\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center_container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_center_content_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_outer_content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main_outer_heading\",\n          children: \"Code editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_center_content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code_input\",\n          onFocus: () => focusTxtPlaceholder,\n          onBlur: () => blurTxtPlaceholder,\n          onKeyUp: insertTxtStage && addTxt,\n          contentEditable: insertTxtStage ? \"true\" : \"false\",\n          onMouseUp: !insertTxtStage && selector,\n          onScroll: e => syncScroll(e, 'input'),\n          children: [\"copy & paste patient record and anonymize it\", !insertTxtStage && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"tooltip_editor_wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tooltip_btn\",\n              onClick: addCode,\n              children: \"Code hinzuf\\xFCgen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code_display\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"internal_code_display\",\n            onScroll: e => syncScroll(e, 'input'),\n            children: tempCodes.length > 0 ? tempCodes.map((code, i) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ind_code_display\",\n                id: code.id,\n                style: {\n                  top: code.top + 'px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  placeholder: \"Code ID\",\n                  className: \"small_code_section\",\n                  onChange: e => editCode(e, i, 'id')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  placeholder: \"Code Desc\",\n                  className: \"large_code_section\",\n                  readOnly: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"remove_code_btn\",\n                  onClick: () => removeTxt(i),\n                  children: \"X\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 41\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 44\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty_editor\",\n              children: !insertTxtStage ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Assign codes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 83\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Finalize editing the patient record\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 113\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this), finalUploadStage && /*#__PURE__*/_jsxDEV(UploadFadeIn, {\n          submit: uploadCodes,\n          close: () => setFinalUploadStage(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_outer_content right_bound_outer_content\",\n        children: !finalUploadStage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor_submit_btn highlighted_editor_submit_btn\",\n          onClick: () => insertTxtStage ? endEditMode() : proceedUpload(),\n          children: insertTxtStage ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Proceed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 191\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 214\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"i7niUXlS1ms+K3fF9HNP7slSqrE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/tc/frontend/tc_hospital_frontend/src/components/coder/editor/Editor.js"],"names":["React","useState","useRef","useEffect","fromRange","v4","uuidv4","Navbar","UploadFadeIn","codeCompletionAsync","uploadCodeAsync","history","useDispatch","Editor","insertTxtStage","setInsertTxtStage","txt","setTxt","selTxt","setSelTxt","tempCodes","setTempCodes","finalUploadStage","setFinalUploadStage","dispatch","document","getElementsByClassName","style","height","offsetHeight","syncScroll","e","origin","target","scrollTop","currentTarget","scrollLeft","addCode","startOverlapCheck","filter","code","start","end","endOverlapCheck","length","alert","setSelectionRange","currentCodes","typingTimerEdit","editCode","i","type","clearTimeout","value","setTimeout","val","then","res","payload","matches","border","newArr","mergedObj","icdCode","icdCodeDesc","catch","err","console","log","removeTxt","splice","selector","select","window","getSelection","selectRange","getRangeAt","selectPos","getBoundingClientRect","codeInput","codeInputPos","tooltip","getElementById","width","display","top","left","offsetWidth","xpath","toString","startOffset","endOffset","id","el","range","createRange","selectNodeContents","textNodes","getTextNodesIn","foundStart","charCount","endCharCount","textNode","setStart","setEnd","sel","removeAllRanges","addRange","node","nodeType","push","children","childNodes","len","apply","highlight","colour","rangeCount","designMode","execCommand","startEditMode","endEditMode","scrollHeight","addTxt","innerHTML","focusTxtPlaceholder","blurTxtPlaceholder","proceedUpload","hasOwnProperty","uploadCodes","preventDefault","codeDataObj","initialCodes","Object","fromEntries","FormData","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,SAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,iCAAP;AACA,OAAO,0CAAP;AAEA,OAAe,0BAAf;AACA,SAAQC,mBAAR,EAA6BC,eAA7B,QAAmD,4BAAnD;AACA,SAAQC,OAAR,QAAsB,0BAAtB;AAGA,SAAQC,WAAR,QAA0B,aAA1B;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAEjB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,IAAD,CAApD;AAEA,QAAM,CAACe,GAAD,EAAMC,MAAN,IAAgBhB,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACqB,gBAAD,EAAmBC,mBAAnB,IAA0CtB,QAAQ,CAAC,KAAD,CAAxD;AAEA,QAAMuB,QAAQ,GAAGZ,WAAW,EAA5B,CATiB,CAWjB;;AAEA;AACJ;AACA;;AACIT,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAsB,IAAAA,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,EAAmDC,KAAnD,CAAyDC,MAAzD,GAAkEH,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,EAAiDG,YAAjD,GAA8D,IAAhI;AACH,GAHQ,EAGN,EAHM,CAAT;AAKA;AACJ;AACA;AACA;;AACI,QAAMC,UAAU,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAC9B;AACA,UAAMC,MAAM,GAAGD,MAAM,KAAK,SAAX,GAAuBP,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAAvB,GAA0ED,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,CAAzF,CAF8B,CAG9B;;AACAO,IAAAA,MAAM,CAACC,SAAP,GAAmBH,CAAC,CAACI,aAAF,CAAgBD,SAAnC;AACAD,IAAAA,MAAM,CAACG,UAAP,GAAoBL,CAAC,CAACI,aAAF,CAAgBC,UAApC;AACH,GAND,CAzBiB,CAiCjB;;AAEA;AACJ;AACA;AACA;AACA;;;AACI,QAAMC,OAAO,GAAG,MAAM;AAClB;AACA,QAAIC,iBAAiB,GAAGlB,SAAS,CAACmB,MAAV,CAAiBC,IAAI,IAAItB,MAAM,CAACuB,KAAP,GAAeD,IAAI,CAACC,KAApB,IAA6BvB,MAAM,CAACuB,KAAP,GAAeD,IAAI,CAACE,GAA1E,CAAxB;AACA,QAAIC,eAAe,GAAGvB,SAAS,CAACmB,MAAV,CAAiBC,IAAI,IAAItB,MAAM,CAACwB,GAAP,GAAaF,IAAI,CAACE,GAAlB,IAAyBxB,MAAM,CAACwB,GAAP,GAAaF,IAAI,CAACC,KAApE,CAAtB,CAHkB,CAIlB;;AACA,QAAIH,iBAAiB,CAACM,MAAlB,GAA2B,CAA3B,IAAgCD,eAAe,CAACC,MAAhB,GAAyB,CAA7D,EAAgE,OAAOC,KAAK,CAAC,sBAAD,CAAZ,CAL9C,CAMlB;;AACAC,IAAAA,iBAAiB,CAAC5B,MAAM,CAACuB,KAAR,EAAevB,MAAM,CAACwB,GAAtB,CAAjB,CAPkB,CAQlB;AACA;;AACArB,IAAAA,YAAY,CAAC0B,YAAY,IAAI,CAAC,GAAGA,YAAJ,EAAkB7B,MAAlB,CAAjB,CAAZ;AACH,GAXD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAI8B,eAAJ;;AACA,QAAMC,QAAQ,GAAG,CAAClB,CAAD,EAAImB,CAAJ,EAAOC,IAAP,KAAgB;AAC7B;AACAC,IAAAA,YAAY,CAACJ,eAAD,CAAZ;AACA,QAAI,CAACjB,CAAC,CAACE,MAAF,CAASoB,KAAd,EAAqB;AACrBL,IAAAA,eAAe,GAAGM,UAAU,CAAC,MAAM;AAC/B9B,MAAAA,QAAQ,CAACf,mBAAmB,CAAC;AAAC0C,QAAAA,IAAI,EAAEA,IAAP;AAAaI,QAAAA,GAAG,EAAExB,CAAC,CAACE,MAAF,CAASoB;AAA3B,OAAD,CAApB,CAAR,CACKG,IADL,CACWC,GAAD,IAAS;AACX,YAAIA,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoBf,MAApB,KAA+B,CAAnC,EAAsC;AAClCnB,UAAAA,QAAQ,CAACC,sBAAT,CAAgC,kBAAhC,EAAoDwB,CAApD,EAAuDvB,KAAvD,CAA6DiC,MAA7D,GAAsE,eAAtE;AACA,iBAAOnC,QAAQ,CAACC,sBAAT,CAAgC,oBAAhC,EAAsDwB,CAAtD,EAAyDG,KAAzD,GAAiE,2BAAyBI,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoBf,MAArH;AACH,SAJU,CAKX;;;AACA,YAAIiB,MAAM,GAAG,CAAC,GAAGzC,SAAJ,CAAb,CANW,CAOX;;AACA,YAAI0C,SAAS,GAAG,EAAC,GAAGD,MAAM,CAACX,CAAD,CAAV;AAAea,UAAAA,OAAO,EAAEhC,CAAC,CAACE,MAAF,CAASoB,KAAjC;AAAwCW,UAAAA,WAAW,EAAEP,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoB,CAApB,EAAuB,CAAvB;AAArD,SAAhB;AACAE,QAAAA,MAAM,CAACX,CAAD,CAAN,GAAYY,SAAZ,CATW,CAUX;;AACAzC,QAAAA,YAAY,CAACwC,MAAD,CAAZ,CAXW,CAYX;;AACApC,QAAAA,QAAQ,CAACC,sBAAT,CAAgC,oBAAhC,EAAsDwB,CAAtD,EAAyDG,KAAzD,GAAiEI,GAAG,CAACC,OAAJ,CAAYC,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,CAAjE,CAbW,CAcX;;AACAlC,QAAAA,QAAQ,CAACC,sBAAT,CAAgC,kBAAhC,EAAoDwB,CAApD,EAAuDvB,KAAvD,CAA6DiC,MAA7D,GAAsE,MAAtE;AACH,OAjBL,EAkBKK,KAlBL,CAkBYC,GAAD,IAAS;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,OApBL;AAqBH,KAtB2B,EAsBzB,IAtByB,CAA5B;AAuBH,GA3BD;AA6BA;AACJ;AACA;AACA;AACA;AACA;;;AACI,QAAMG,SAAS,GAAInB,CAAD,IAAO;AACrB,QAAIW,MAAM,GAAG,CAAC,GAAGzC,SAAJ,CAAb,CADqB,CAErB;;AACAyC,IAAAA,MAAM,CAACS,MAAP,CAAcpB,CAAd,EAAiB,CAAjB,EAHqB,CAIrB;;AACA7B,IAAAA,YAAY,CAACwC,MAAD,CAAZ;AACH,GAND,CAlGiB,CA0GjB;AAEA;;AAEA;AACJ;AACA;AACA;AACA;AACA;;;AACI,QAAMU,QAAQ,GAAIxC,CAAD,IAAO;AACpB;AACA,QAAIyC,MAAM,GAAGC,MAAM,CAACC,YAAP,EAAb;AAAA,QACIC,WAAW,GAAGH,MAAM,CAACI,UAAP,CAAkB,CAAlB,CADlB;AAAA,QAEIC,SAAS,GAAGF,WAAW,CAACG,qBAAZ,EAFhB;AAAA,QAGIC,SAAS,GAAGtD,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAHhB;AAAA,QAIIsD,YAAY,GAAGD,SAAS,CAACD,qBAAV,EAJnB;AAAA,QAKIG,OAAO,GAAGxD,QAAQ,CAACyD,cAAT,CAAwB,wBAAxB,CALd,CAFoB,CAQpB;;AACA,QAAIL,SAAS,CAACM,KAAV,GAAkB,CAAtB,EAAyB,OAAOF,OAAO,CAACtD,KAAR,CAAcyD,OAAd,GAAwB,MAA/B,CATL,CAUpB;;AACAH,IAAAA,OAAO,CAACtD,KAAR,CAAcyD,OAAd,GAAwB,QAAxB;AACAH,IAAAA,OAAO,CAACtD,KAAR,CAAc0D,GAAd,GAAqBR,SAAS,CAACQ,GAAV,GAAgBL,YAAY,CAACK,GAA7B,GAAmCJ,OAAO,CAACpD,YAA3C,GAA0D,EAA1D,GAA+DkD,SAAS,CAAC7C,SAA1E,GAAqF,IAAzG;AACA+C,IAAAA,OAAO,CAACtD,KAAR,CAAc2D,IAAd,GAAsBT,SAAS,CAACS,IAAV,GAAiBN,YAAY,CAACM,IAA9B,GAAqCT,SAAS,CAACM,KAAV,GAAgB,CAArD,GAAyDF,OAAO,CAACM,WAAR,GAAsB,CAAhF,GAAmF,IAAxG,CAboB,CAcpB;;AACA,QAAIC,KAAK,GAAGpF,SAAS,CAACuE,WAAD,EAAcI,SAAd,CAArB;AAEA5D,IAAAA,SAAS,CAAC,EAAC,GAAGD,MAAJ;AAAa,SAAG;AAClBqC,QAAAA,GAAG,EAAEoB,WAAW,CAACc,QAAZ,EADa;AAElBhD,QAAAA,KAAK,EAAE+C,KAAK,CAACE,WAFK;AAGlBhD,QAAAA,GAAG,EAAE8C,KAAK,CAACG,SAHO;AAIlBC,QAAAA,EAAE,EAAEtF,MAAM,EAJQ;AAKlB+E,QAAAA,GAAG,EAAER,SAAS,CAACQ,GAAV,GAAgBL,YAAY,CAACK,GAA7B,GAAmCN,SAAS,CAAC7C,SAA7C,GAAyD;AAL5C;AAAhB,KAAD,CAAT;AAQH,GAzBD;AA2BA;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAASY,iBAAT,CAA2BL,KAA3B,EAAkCC,GAAlC,EAAuC;AAEnC,QAAImD,EAAE,GAAGpE,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,CAAT;AAEA,QAAIoE,KAAK,GAAGrE,QAAQ,CAACsE,WAAT,EAAZ;AACAD,IAAAA,KAAK,CAACE,kBAAN,CAAyBH,EAAzB;AACA,QAAII,SAAS,GAAGC,cAAc,CAACL,EAAD,CAA9B;AACA,QAAIM,UAAU,GAAG,KAAjB;AACA,QAAIC,SAAS,GAAG,CAAhB;AAAA,QAAmBC,YAAnB;;AAEA,SAAK,IAAInD,CAAC,GAAG,CAAR,EAAWoD,QAAhB,EAA0BA,QAAQ,GAAGL,SAAS,CAAC/C,CAAC,EAAF,CAA9C,GAAuD;AACnDmD,MAAAA,YAAY,GAAGD,SAAS,GAAGE,QAAQ,CAAC1D,MAApC;;AACA,UAAI,CAACuD,UAAD,IAAe1D,KAAK,IAAI2D,SAAxB,KAAsC3D,KAAK,GAAG4D,YAAR,IAAyB5D,KAAK,IAAI4D,YAAT,IAAyBnD,CAAC,IAAI+C,SAAS,CAACrD,MAAvG,CAAJ,EAAqH;AACjHkD,QAAAA,KAAK,CAACS,QAAN,CAAeD,QAAf,EAAyB7D,KAAK,GAAG2D,SAAjC;AACAD,QAAAA,UAAU,GAAG,IAAb;AACH;;AACD,UAAIA,UAAU,IAAIzD,GAAG,IAAI2D,YAAzB,EAAuC;AACnCP,QAAAA,KAAK,CAACU,MAAN,CAAaF,QAAb,EAAuB5D,GAAG,GAAG0D,SAA7B;AACA;AACH;;AACDA,MAAAA,SAAS,GAAGC,YAAZ;AACH;;AAED,QAAII,GAAG,GAAGhC,MAAM,CAACC,YAAP,EAAV;AACA+B,IAAAA,GAAG,CAACC,eAAJ;AACAD,IAAAA,GAAG,CAACE,QAAJ,CAAab,KAAb,EAzBmC,CA2BnC;;AAEA,aAASI,cAAT,CAAwBU,IAAxB,EAA8B;AAC1B,UAAIX,SAAS,GAAG,EAAhB;;AACA,UAAIW,IAAI,CAACC,QAAL,KAAkB,CAAtB,EAAyB;AACrBZ,QAAAA,SAAS,CAACa,IAAV,CAAeF,IAAf;AACH,OAFD,MAEO;AACH,YAAIG,QAAQ,GAAGH,IAAI,CAACI,UAApB;;AACA,aAAK,IAAI9D,CAAC,GAAG,CAAR,EAAW+D,GAAG,GAAGF,QAAQ,CAACnE,MAA/B,EAAuCM,CAAC,GAAG+D,GAA3C,EAAgD,EAAE/D,CAAlD,EAAqD;AACjD+C,UAAAA,SAAS,CAACa,IAAV,CAAeI,KAAf,CAAqBjB,SAArB,EAAgCC,cAAc,CAACa,QAAQ,CAAC7D,CAAD,CAAT,CAA9C;AACH;AACJ;;AACD,aAAO+C,SAAP;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACI,WAASkB,SAAT,CAAmBC,MAAnB,EAA2B;AAEvB,QAAItB,KAAJ,EAAWW,GAAX;AAEAA,IAAAA,GAAG,GAAGhC,MAAM,CAACC,YAAP,EAAN;;AACA,QAAI+B,GAAG,CAACY,UAAJ,IAAkBZ,GAAG,CAAC7B,UAA1B,EAAsC;AAClCkB,MAAAA,KAAK,GAAGW,GAAG,CAAC7B,UAAJ,CAAe,CAAf,CAAR;AACH;;AACDnD,IAAAA,QAAQ,CAAC6F,UAAT,GAAsB,IAAtB;AACAb,IAAAA,GAAG,CAACC,eAAJ;AACAD,IAAAA,GAAG,CAACE,QAAJ,CAAab,KAAb;AACArE,IAAAA,QAAQ,CAAC8F,WAAT,CAAqB,WAArB,EAAkC,KAAlC,EAAyCH,MAAzC;AACA3F,IAAAA,QAAQ,CAAC6F,UAAT,GAAsB,KAAtB;AACH,GAjNgB,CAmNjB;;AAEA;AACJ;AACA;;;AACI,QAAME,aAAa,GAAG,MAAM,CAE3B,CAFD;AAIA;AACJ;AACA;AACA;AACA;;;AACI,QAAMC,WAAW,GAAG,MAAM;AACtB;AACA,QAAIzG,GAAG,KAAK,EAAZ,EAAgB,OAAO6B,KAAK,CAAC,mBAAD,CAAZ,CAFM,CAGtB;;AACA9B,IAAAA,iBAAiB,CAAC,KAAD,CAAjB,CAJsB,CAKtB;;AACAU,IAAAA,QAAQ,CAACyD,cAAT,CAAwB,uBAAxB,EAAiDvD,KAAjD,CAAuDC,MAAvD,GAAgEH,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,EAA8C,CAA9C,EAAiDgG,YAAjD,GAA8D,IAA9H;AACH,GAPD;AASA;AACJ;AACA;AACA;;;AACI,QAAMC,MAAM,GAAI5F,CAAD,IAAO;AAClB;AACAd,IAAAA,MAAM,CAACc,CAAC,CAACI,aAAF,CAAgByF,SAAjB,CAAN,CAFkB,CAGlB;;AACA,QAAI7F,CAAC,CAACI,aAAF,CAAgByF,SAAhB,KAAgC,EAApC,EAAwC7F,CAAC,CAACI,aAAF,CAAgByF,SAAhB,GAA4B,8CAA5B;AAC3C,GALD;AAOA;AACJ;AACA;;;AACI,QAAMC,mBAAmB,GAAI9F,CAAD,IAAO;AAC/Bc,IAAAA,KAAK,CAAC,MAAD,CAAL;AACA,QAAId,CAAC,CAACI,aAAF,CAAgByF,SAAhB,KAAgC,8CAApC,EAAoF7F,CAAC,CAACI,aAAF,CAAgByF,SAAhB,GAA4B,EAA5B;AACvF,GAHD;AAKA;AACJ;AACA;;;AACI,QAAME,kBAAkB,GAAI/F,CAAD,IAAO;AAC9B,QAAIA,CAAC,CAACI,aAAF,CAAgByF,SAAhB,KAAgC,EAApC,EAAwC7F,CAAC,CAACI,aAAF,CAAgByF,SAAhB,GAA4B,8CAA5B;AAC3C,GAFD,CAhQiB,CAoQjB;;AAEA;AACJ;AACA;AACA;;;AACI,QAAMG,aAAa,GAAG,MAAM;AACxB;AACA,QAAI3G,SAAS,CAACwB,MAAV,GAAmB,CAAvB,EAA0B,OAAOC,KAAK,CAAC,kCAAD,CAAZ;AAC1B,QAAIzB,SAAS,CAACmB,MAAV,CAAiBC,IAAI,IAAI,CAACA,IAAI,CAACwF,cAAL,CAAoB,SAApB,CAAD,IAAmCxF,IAAI,CAACuB,OAAL,KAAiB,EAA7E,EAAiFnB,MAAjF,KAA4F,CAAhG,EAAmG,OAAOC,KAAK,CAAC,mBAAD,CAAZ,CAH3E,CAIxB;;AACAtB,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,GAND;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI,QAAM0G,WAAW,GAAIlG,CAAD,IAAO;AACvB;AACAA,IAAAA,CAAC,CAACmG,cAAF;AACA3G,IAAAA,mBAAmB,CAAC,KAAD,CAAnB,CAHuB,CAIvB;;AACA,QAAI4G,WAAW,GAAG;AAACC,MAAAA,YAAY,EAAEhH,SAAf;AAA0BJ,MAAAA,GAAG,EAAEA,GAA/B;AAAoC,SAAGqH,MAAM,CAACC,WAAP,CAAmB,IAAIC,QAAJ,CAAaxG,CAAC,CAACE,MAAf,CAAnB;AAAvC,KAAlB,CALuB,CAMvB;;AACAT,IAAAA,QAAQ,CAACd,eAAe,CAACyH,WAAD,CAAhB,CAAR,CACK3E,IADL,CACWC,GAAD,IAAS;AACXU,MAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACC,OAAhB,EADW,CAEX;AACH,KAJL,EAKKO,KALL,CAKYC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACH,KAPL;AAQH,GAfD,CAxRiB,CAySjB;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAA4B,UAAA,OAAO,EAAE,MAAM2D,mBAA3C;AAAgE,UAAA,MAAM,EAAE,MAAMC,kBAA9E;AAAkG,UAAA,OAAO,EAAEhH,cAAc,IAAI6G,MAA7H;AAAqI,UAAA,eAAe,EAAE7G,cAAc,GAAG,MAAH,GAAY,OAAhL;AAAyL,UAAA,SAAS,EAAE,CAACA,cAAD,IAAmByD,QAAvN;AAAiO,UAAA,QAAQ,EAAGxC,CAAD,IAAOD,UAAU,CAACC,CAAD,EAAI,OAAJ,CAA5P;AAAA,qEAEK,CAACjB,cAAD,iBACG;AAAK,YAAA,EAAE,EAAC,wBAAR;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,aAAf;AAA6B,cAAA,OAAO,EAAEuB,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAHR;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eASI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,iCACI;AAAK,YAAA,EAAE,EAAC,uBAAR;AAAgC,YAAA,QAAQ,EAAGN,CAAD,IAAOD,UAAU,CAACC,CAAD,EAAI,OAAJ,CAA3D;AAAA,sBAEIX,SAAS,CAACwB,MAAV,GAAmB,CAAnB,GACIxB,SAAS,CAACoH,GAAV,CAAc,CAAChG,IAAD,EAAOU,CAAP,KAAa;AACvB,kCAAO;AAAK,gBAAA,SAAS,EAAC,kBAAf;AAAkC,gBAAA,EAAE,EAAEV,IAAI,CAACoD,EAA3C;AAA+C,gBAAA,KAAK,EAAE;AAACP,kBAAAA,GAAG,EAAC7C,IAAI,CAAC6C,GAAL,GAAS;AAAd,iBAAtD;AAAA,wCACH;AAAO,kBAAA,WAAW,EAAC,SAAnB;AAA6B,kBAAA,SAAS,EAAC,oBAAvC;AAA4D,kBAAA,QAAQ,EAAGtD,CAAD,IAAOkB,QAAQ,CAAClB,CAAD,EAAImB,CAAJ,EAAO,IAAP;AAArF;AAAA;AAAA;AAAA;AAAA,wBADG,eAEH;AAAO,kBAAA,WAAW,EAAC,WAAnB;AAA+B,kBAAA,SAAS,EAAC,oBAAzC;AAA8D,kBAAA,QAAQ;AAAtE;AAAA;AAAA;AAAA;AAAA,wBAFG,eAGH;AAAK,kBAAA,SAAS,EAAC,iBAAf;AAAiC,kBAAA,OAAO,EAAE,MAAMmB,SAAS,CAACnB,CAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHG;AAAA,iBAAgFA,CAAhF;AAAA;AAAA;AAAA;AAAA,sBAAP;AAKH,aAND,CADJ,gBASI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+B,CAACpC,cAAD,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAnB,gBAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhF;AAAA;AAAA;AAAA;AAAA;AAXR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBATJ,EA0BKQ,gBAAgB,iBAAI,QAAC,YAAD;AAAc,UAAA,MAAM,EAAI2G,WAAxB;AAAqC,UAAA,KAAK,EAAI,MAAM1G,mBAAmB,CAAC,KAAD;AAAvE;AAAA;AAAA;AAAA;AAAA,gBA1BzB;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAmCI;AAAK,QAAA,SAAS,EAAC,8CAAf;AAAA,kBACK,CAACD,gBAAD,iBAAqB;AAAK,UAAA,SAAS,EAAC,iDAAf;AAAiE,UAAA,OAAO,EAAE,MAAMR,cAAc,GAAG2G,WAAW,EAAd,GAAmBM,aAAa,EAA9H;AAAA,oBAAmIjH,cAAc,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,gBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA3K;AAAA;AAAA;AAAA;AAAA;AAD1B;AAAA;AAAA;AAAA;AAAA,cAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH,CAvVD;;GAAMD,M;UASeD,W;;;KATfC,M;AAyVN,eAAeA,MAAf","sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\nimport { fromRange } from \"xpath-range\"\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Navbar from \"../../general/navbar/Navbar\";\nimport UploadFadeIn from \"./UploadFadeIn\";\n\nimport '../../../styles/shared/main.css';\nimport '../../../styles/shared/editor/editor.css';\n\nimport {} from \"../../../slice/authSlice\";\nimport {codeCompletionAsync, uploadCodeAsync} from \"../../../slice/reviewSlice\";\nimport {history} from \"../../../helpers/history\";\n\n\nimport {useDispatch} from \"react-redux\";\n\nconst Editor = () => {\n\n    const [insertTxtStage, setInsertTxtStage] = useState(true);\n\n    const [txt, setTxt] = useState(\"\");\n    const [selTxt, setSelTxt] = useState({})\n    const [tempCodes, setTempCodes] = useState([])\n    const [finalUploadStage, setFinalUploadStage] = useState(false)\n\n    const dispatch = useDispatch();\n\n    //todo security checks\n\n    /**\n     * @function (01) ensure that the empty sign has the correct height\n     */\n    useEffect(() => {\n        //01\n        document.getElementsByClassName('empty_editor')[0].style.height = document.getElementsByClassName('code_input')[0].offsetHeight+'px'\n    }, [])\n\n    /**\n     * @function (01) define the target by choosing the complementary of the scrolled div\n     *           (02) assign scroll toÃ¼ and scroll left to the target based on the event scrolled position\n     */\n    const syncScroll = (e, origin) => {\n        //01\n        const target = origin === 'display' ? document.getElementsByClassName('code_input')[0] : document.getElementsByClassName('code_display')[0]\n        //02\n        target.scrollTop = e.currentTarget.scrollTop;\n        target.scrollLeft = e.currentTarget.scrollLeft;\n    }\n\n    //==================================================\n\n    /**\n     * @function (01) check that there is no overlapping regarding the codes\n     *           (02) highlight the code\n     *           (03) push into data structure (updates the code overview on the right side)\n     */\n    const addCode = () => {\n        //01\n        let startOverlapCheck = tempCodes.filter(code => selTxt.start > code.start && selTxt.start < code.end)\n        let endOverlapCheck = tempCodes.filter(code => selTxt.end < code.end && selTxt.end > code.start)\n        //todo check that this code has not been used yet\n        if (startOverlapCheck.length > 0 || endOverlapCheck.length > 0) return alert('No overlaps possbile')\n        //02\n        setSelectionRange(selTxt.start, selTxt.end)\n        //highlight(\"yellow\");\n        //03\n        setTempCodes(currentCodes => [...currentCodes, selTxt]);\n    }\n\n    /**\n     * @function (00) wait until typing ended and dispatch send to backend for code completion and wait\n     *           (01) duplicate the array\n     *           (02) find the array entry by index\n     *           (03) add code to this entry\n     * @param e is the event\n     * @param i is the index of the array element which is\n     * @param type either id or desc of the code - required for the autocompletion\n     */\n    let typingTimerEdit;\n    const editCode = (e, i, type) => {\n        //00\n        clearTimeout(typingTimerEdit);\n        if (!e.target.value) return;\n        typingTimerEdit = setTimeout(() => {\n            dispatch(codeCompletionAsync({type: type, val: e.target.value}))\n                .then((res) => {\n                    if (res.payload.matches.length !== 1) {\n                        document.getElementsByClassName('ind_code_display')[i].style.border = \"1px solid red\";\n                        return document.getElementsByClassName('large_code_section')[i].value = 'Zu viele Ergebnisse - '+res.payload.matches.length\n                    }\n                    //01\n                    let newArr = [...tempCodes];\n                    //02\n                    let mergedObj = {...newArr[i], icdCode: e.target.value, icdCodeDesc: res.payload.matches[0][2]}\n                    newArr[i] = mergedObj;\n                    //03\n                    setTempCodes(newArr);\n                    //04\n                    document.getElementsByClassName('large_code_section')[i].value = res.payload.matches[0][2]\n                    //05\n                    document.getElementsByClassName('ind_code_display')[i].style.border = \"none\";\n                })\n                .catch((err) => {\n                    console.log(err)\n                });\n        }, 1000);\n    }\n\n    /**\n     * @function (01) duplicate the array\n     *           (02) splice the array\n     *           (03) set the new temp codes\n     * @param i index of the highlight which is deleted\n     */\n    const removeTxt = (i) => {\n        let newArr = [...tempCodes];\n        //02\n        newArr.splice(i, 1);\n        //03\n        setTempCodes(newArr);\n    }\n\n    //==================================================\n\n    //todo next section\n\n    /**\n     * @function (01) get all selects and positions\n     *           (02) if only cursor change takes place only hide the tooltip\n     *           (03) reposition tooltip\n     *           (04) set selected text state\n     */\n    const selector = (e) => {\n        //01\n        let select = window.getSelection(),\n            selectRange = select.getRangeAt(0),\n            selectPos = selectRange.getBoundingClientRect(),\n            codeInput = document.getElementsByClassName('code_input')[0],\n            codeInputPos = codeInput.getBoundingClientRect(),\n            tooltip = document.getElementById('tooltip_editor_wrapper');\n        //02\n        if (selectPos.width < 1) return tooltip.style.display = \"none\";\n        //03\n        tooltip.style.display = \"inline\";\n        tooltip.style.top = (selectPos.top - codeInputPos.top - tooltip.offsetHeight - 10 + codeInput.scrollTop)+'px';\n        tooltip.style.left = (selectPos.left - codeInputPos.left + selectPos.width/2 - tooltip.offsetWidth / 2)+'px';\n        //04\n        let xpath = fromRange(selectRange, codeInput)\n\n        setSelTxt({...selTxt,  ...{\n                val: selectRange.toString(),\n                start: xpath.startOffset,\n                end: xpath.endOffset,\n                id: uuidv4(),\n                top: selectPos.top - codeInputPos.top + codeInput.scrollTop - 5\n            },\n        })\n    }\n\n    /**\n     * @function (01)\n     *           (02)\n     * @param start\n     * @param end\n     */\n    function setSelectionRange(start, end) {\n\n        let el = document.getElementsByClassName('code_input')[0];\n\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        var textNodes = getTextNodesIn(el);\n        var foundStart = false;\n        var charCount = 0, endCharCount;\n\n        for (var i = 0, textNode; textNode = textNodes[i++]; ) {\n            endCharCount = charCount + textNode.length;\n            if (!foundStart && start >= charCount && (start < endCharCount || (start == endCharCount && i <= textNodes.length))) {\n                range.setStart(textNode, start - charCount);\n                foundStart = true;\n            }\n            if (foundStart && end <= endCharCount) {\n                range.setEnd(textNode, end - charCount);\n                break;\n            }\n            charCount = endCharCount;\n        }\n\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n        //Helper functions\n\n        function getTextNodesIn(node) {\n            var textNodes = [];\n            if (node.nodeType === 3) {\n                textNodes.push(node);\n            } else {\n                var children = node.childNodes;\n                for (var i = 0, len = children.length; i < len; ++i) {\n                    textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n                }\n            }\n            return textNodes;\n        }\n    }\n\n    /**\n     * @function\n     * @param colour\n     */\n    function highlight(colour) {\n\n        let range, sel;\n\n        sel = window.getSelection();\n        if (sel.rangeCount && sel.getRangeAt) {\n            range = sel.getRangeAt(0);\n        }\n        document.designMode = \"on\";\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand(\"BackColor\", false, colour);\n        document.designMode = \"off\";\n    }\n\n    //==================================================\n\n    /**\n     * @function (01)\n     */\n    const startEditMode = () => {\n\n    }\n\n    /**\n     * @function (00) check if the div has any type of input\n     *           (01) update the state of the of the insertTxtStage\n     *           (02) adjust the heights\n     */\n    const endEditMode = () => {\n        //00\n        if (txt === \"\") return alert('we need some text')\n        //01\n        setInsertTxtStage(false);\n        //02\n        document.getElementById('internal_code_display').style.height = document.getElementsByClassName('code_input')[0].scrollHeight+'px';\n    }\n\n    /**\n     * @function (01) update the current text\n     *           (02) if the text is empty\n     */\n    const addTxt = (e) => {\n        //01\n        setTxt(e.currentTarget.innerHTML)\n        //02\n        if (e.currentTarget.innerHTML   === \"\") e.currentTarget.innerHTML = \"copy & paste patient record and anonymize it\"\n    }\n\n    /**\n     * @function if the input only has the placeholder remove it temporarily\n     */\n    const focusTxtPlaceholder = (e) => {\n        alert(\"moin\")\n        if (e.currentTarget.innerHTML   === \"copy & paste patient record and anonymize it\") e.currentTarget.innerHTML = \"\"\n    }\n\n    /**\n     * @function if the user leaves the input and it is empty insert the placeholder\n     */\n    const blurTxtPlaceholder = (e) => {\n        if (e.currentTarget.innerHTML   === \"\") e.currentTarget.innerHTML = \"copy & paste patient record and anonymize it\"\n    }\n\n    //==================================================\n\n    /**\n     * @function (01) check if any codes were added - if not return + that every code has an icd code allocated\n     *           (02) fade in the final upload overview - where tags, difficulty, internal use and title are provided\n     */\n    const proceedUpload = () => {\n        //01\n        if (tempCodes.length < 1) return alert(\"please provide at least one code\");\n        if (tempCodes.filter(code => !code.hasOwnProperty('icdCode') || code.icdCode === \"\").length !== 0) return alert(\"allocate icd code\");\n        //02\n        setFinalUploadStage(true);\n    }\n\n    /**\n     * @function (01) prevent default\n     *           (02) create a merged object of text, codes\n     *           (03) upload via dispatch and wait for success\n     *           (04) on success clear the view and let user create a new\n     */\n    const uploadCodes = (e) => {\n        //01\n        e.preventDefault();\n        setFinalUploadStage(false);\n        //02\n        let codeDataObj = {initialCodes: tempCodes, txt: txt, ...Object.fromEntries(new FormData(e.target))}\n        //03\n        dispatch(uploadCodeAsync(codeDataObj))\n            .then((res) => {\n                console.log(res.payload)\n                //04\n            })\n            .catch((err) => {\n                console.log('error', err)\n            })\n    }\n\n    // ==========================\n\n    return (\n        <div className=\"center_container\">\n            <Navbar />\n            <div className=\"main_center_content_wrapper\">\n\n                <div className=\"main_outer_content\">\n                    <div className=\"main_outer_heading\">Code editor</div>\n                </div>\n\n                <div className=\"main_center_content\">\n                    <div className=\"code_input\" onFocus={() => focusTxtPlaceholder} onBlur={() => blurTxtPlaceholder} onKeyUp={insertTxtStage && addTxt} contentEditable={insertTxtStage ? \"true\" : \"false\"} onMouseUp={!insertTxtStage && selector} onScroll={(e) => syncScroll(e, 'input')}>\n                        copy & paste patient record and anonymize it\n                        {!insertTxtStage &&\n                            <div id=\"tooltip_editor_wrapper\">\n                                <div className=\"tooltip_btn\" onClick={addCode}>Code hinzufÃ¼gen</div>\n                            </div>\n                        }\n                    </div>\n                    <div className=\"code_display\">\n                        <div id=\"internal_code_display\" onScroll={(e) => syncScroll(e, 'input')}>\n                        {\n                            tempCodes.length > 0 ? (\n                                tempCodes.map((code, i) => {\n                                    return <div className=\"ind_code_display\" id={code.id} style={{top:code.top+'px'}} key={i}>\n                                        <input placeholder=\"Code ID\" className=\"small_code_section\" onChange={(e) => editCode(e, i, 'id')}/>\n                                        <input placeholder=\"Code Desc\" className=\"large_code_section\" readOnly/>\n                                        <div className=\"remove_code_btn\" onClick={() => removeTxt(i)}>X</div>\n                                    </div>;\n                                })\n                            ) : (\n                                <div className=\"empty_editor\">{!insertTxtStage ? (<span>Assign codes</span>) : (<span>Finalize editing the patient record</span>)}</div>\n                            )\n                        }\n                        </div>\n                    </div>\n                    {finalUploadStage && <UploadFadeIn submit = {uploadCodes} close = {() => setFinalUploadStage(false)}/>}\n                </div>\n\n                <div className=\"main_outer_content right_bound_outer_content\">\n                    {!finalUploadStage && <div className=\"editor_submit_btn highlighted_editor_submit_btn\" onClick={() => insertTxtStage ? endEditMode() : proceedUpload()}>{insertTxtStage ? <span>Proceed</span> : <span>Upload</span>}</div>}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Editor;\n"]},"metadata":{},"sourceType":"module"}