{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, logout, signup } from '../services/auth.service';\nconst initialState = {\n  loggedIn: false,\n  userData: {}\n};\nexport const loginAsync = createAsyncThunk('auth/login', async credentials => {\n  return await login(credentials);\n});\nexport const signUpAsync = createAsyncThunk('auth/signup', async signupData => {\n  return await signup(signupData);\n});\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  return await logout();\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUserData: (state, action) => {\n      //todo update the user data object\n      console.log(action.payload);\n      state.userData = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      state.userData = action.payload.userData;\n      console.log(state.userData);\n    }).addCase(signUpAsync.fulfilled, (state, action) => {\n      console.log('signed up');\n      console.log(state);\n      console.log('signed up', action.payload);\n    }).addCase(logoutAsync.fulfilled, (state, action) => {\n      console.log('loaded logout');\n    });\n  }\n});\nexport const {\n  setUserData\n} = authSlice.actions;\nexport const selectIsLoggedIn = state => state.auth.loggedIn;\nexport const selectUserData = state => state.auth.userData;\nexport const selectUserType = state => state.auth.userData.userType;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/slice/authSlice.js"],"names":["createAsyncThunk","createSlice","login","logout","signup","initialState","loggedIn","userData","loginAsync","credentials","signUpAsync","signupData","logoutAsync","authSlice","name","reducers","setUserData","state","action","console","log","payload","extraReducers","builder","addCase","fulfilled","actions","selectIsLoggedIn","auth","selectUserData","selectUserType","userType","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,MAAvB,QAAoC,0BAApC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,KADO;AAEjBC,EAAAA,QAAQ,EAAE;AAFO,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CACtC,YADsC,EAEtC,MAAOS,WAAP,IAAuB;AACnB,SAAO,MAAMP,KAAK,CAACO,WAAD,CAAlB;AACH,CAJqC,CAAnC;AAOP,OAAO,MAAMC,WAAW,GAAGV,gBAAgB,CACvC,aADuC,EAEvC,MAAOW,UAAP,IAAsB;AAClB,SAAO,MAAMP,MAAM,CAACO,UAAD,CAAnB;AACH,CAJsC,CAApC;AAOP,OAAO,MAAMC,WAAW,GAAGZ,gBAAgB,CACvC,aADuC,EAEvC,YAAY;AACR,SAAO,MAAMG,MAAM,EAAnB;AACH,CAJsC,CAApC;AAOP,OAAO,MAAMU,SAAS,GAAGZ,WAAW,CAAC;AACjCa,EAAAA,IAAI,EAAE,MAD2B;AAEjCT,EAAAA,YAFiC;AAGjCU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACAJ,MAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACG,OAAxB;AACH;AALK,GAHuB;AAUjCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACahB,UAAU,CAACiB,SADxB,EACmC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACG,OAAP,CAAed,QAAhC;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACV,QAAlB;AACH,KAJL,EAKKiB,OALL,CAKad,WAAW,CAACe,SALzB,EAKoC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAM,CAACG,OAAhC;AACH,KATL,EAUKG,OAVL,CAUaZ,WAAW,CAACa,SAVzB,EAUoC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,KAZL;AAaH;AAxBgC,CAAD,CAA7B;AA2BP,OAAO,MAAM;AAACJ,EAAAA;AAAD,IAAgBH,SAAS,CAACa,OAAhC;AAEP,OAAO,MAAMC,gBAAgB,GAAIV,KAAD,IAAWA,KAAK,CAACW,IAAN,CAAWtB,QAA/C;AACP,OAAO,MAAMuB,cAAc,GAAIZ,KAAD,IAAWA,KAAK,CAACW,IAAN,CAAWrB,QAA7C;AACP,OAAO,MAAMuB,cAAc,GAAIb,KAAD,IAAWA,KAAK,CAACW,IAAN,CAAWrB,QAAX,CAAoBwB,QAAtD;AAEP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {login, logout, signup} from '../services/auth.service';\n\nconst initialState = {\n    loggedIn: false,\n    userData: {}\n};\n\nexport const loginAsync = createAsyncThunk(\n    'auth/login',\n    async (credentials) => {\n        return await login(credentials);\n    }\n);\n\nexport const signUpAsync = createAsyncThunk(\n    'auth/signup',\n    async (signupData) => {\n        return await signup(signupData);\n    }\n);\n\nexport const logoutAsync = createAsyncThunk(\n    'auth/logout',\n    async () => {\n        return await logout();\n    }\n);\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        setUserData: (state, action) => {\n            //todo update the user data object\n            console.log(action.payload)\n            state.userData = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(loginAsync.fulfilled, (state, action) => {\n                state.userData = action.payload.userData;\n                console.log(state.userData)\n            })\n            .addCase(signUpAsync.fulfilled, (state, action) => {\n                console.log('signed up')\n                console.log(state)\n                console.log('signed up', action.payload)\n            })\n            .addCase(logoutAsync.fulfilled, (state, action) => {\n                console.log('loaded logout');\n            });\n    },\n});\n\nexport const {setUserData} = authSlice.actions;\n\nexport const selectIsLoggedIn = (state) => state.auth.loggedIn;\nexport const selectUserData = (state) => state.auth.userData;\nexport const selectUserType = (state) => state.auth.userData.userType;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}