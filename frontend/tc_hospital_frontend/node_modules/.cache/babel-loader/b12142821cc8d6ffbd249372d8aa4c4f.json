{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/main/general/Routes.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"; //General routes\n\nimport LandingPage from \"./LandingPage\";\nimport Login from \"./Login\";\nimport Verify from \"../general/verify/Verify\"; //Admin only routes\n\nimport AdminAnalytics from \"../admin/Analytics\";\nimport AdminInvite from \"../admin/invite/InviteUser\";\nimport { history } from \"../../../helpers/history\";\nimport { selectIsLoggedIn, selectUserType } from \"../../../slice/authSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Routes() {\n  _s();\n\n  /**\n   * @desc (01) check from redux if the user is logged in\n   *       (02) if user is logged in redirect to the specific user type\n   */\n  const loggedIn = useSelector(selectIsLoggedIn);\n  const userType = useSelector(selectUserType); //import Navbar from '../sub/Navbar';\n\n  /**\n   * @desc return the available routes based on the current user status - logged in or not logged in\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: LandingPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/login\",\n        component: Login\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/admin/invite/\",\n        component: AdminInvite\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/admin/analytics/\",\n        component: AdminAnalytics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/verify/\",\n        component: Verify\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n/*\n{loggedIn ? (\n                    <>\n                        <Route exact path=\"/admin/invite/\" component={AdminInvite} />\n                        <Route exact path=\"/admin/analytics/\" component={AdminAnalytics} />\n                    </>\n                    ) : (\n                        <Route exact path=\"/admin/analytics/\" component={AdminAnalytics} />\n                    )}\n */\n\n\n_s(Routes, \"D35w8o6pOvsJCarD5fVUimi6iqA=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Routes;\nexport default Routes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/components/main/general/Routes.js"],"names":["React","useSelector","BrowserRouter","Switch","Route","LandingPage","Login","Verify","AdminAnalytics","AdminInvite","history","selectIsLoggedIn","selectUserType","Routes","loggedIn","userType"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA4C,kBAA5C,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAIA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAAQC,gBAAR,EAA0BC,cAA1B,QAA+C,0BAA/C;;;;AAGA,SAASC,MAAT,GAAkB;AAAA;;AACd;AACJ;AACA;AACA;AACI,QAAMC,QAAQ,GAAGb,WAAW,CAACU,gBAAD,CAA5B;AACA,QAAMI,QAAQ,GAAGd,WAAW,CAACW,cAAD,CAA5B,CANc,CAOd;;AAEA;AACJ;AACA;;AACI,sBACI;AAAA,2BACI,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAEP;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,QAAlB;AAA2B,QAAA,SAAS,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,gBAAlB;AAAmC,QAAA,SAAS,EAAEG;AAA9C;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,mBAAlB;AAAsC,QAAA,SAAS,EAAED;AAAjD;AAAA;AAAA;AAAA;AAAA,cAJJ,eAMI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,SAAS,EAAED;AAAlC;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAYH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnCSM,M;UAKYZ,W,EACAA,W;;;KANZY,M;AAqCT,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BrowserRouter, Switch, Route} from \"react-router-dom\";\n\n//General routes\nimport LandingPage from \"./LandingPage\";\nimport Login from \"./Login\";\nimport Verify from \"../general/verify/Verify\";\n\n//Admin only routes\nimport AdminAnalytics from \"../admin/Analytics\";\nimport AdminInvite from \"../admin/invite/InviteUser\";\n\n\n\nimport { history } from \"../../../helpers/history\";\nimport {selectIsLoggedIn, selectUserType} from \"../../../slice/authSlice\";\n\n\nfunction Routes() {\n    /**\n     * @desc (01) check from redux if the user is logged in\n     *       (02) if user is logged in redirect to the specific user type\n     */\n    const loggedIn = useSelector(selectIsLoggedIn);\n    const userType = useSelector(selectUserType);\n    //import Navbar from '../sub/Navbar';\n\n    /**\n     * @desc return the available routes based on the current user status - logged in or not logged in\n     */\n    return (\n        <>\n            <Switch>\n                <Route exact path=\"/\" component={LandingPage} />\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/admin/invite/\" component={AdminInvite} />\n                <Route exact path=\"/admin/analytics/\" component={AdminAnalytics} />\n\n                <Route path=\"/verify/\" component={Verify} />\n            </Switch>\n        </>\n    );\n}\n\n/*\n{loggedIn ? (\n                    <>\n                        <Route exact path=\"/admin/invite/\" component={AdminInvite} />\n                        <Route exact path=\"/admin/analytics/\" component={AdminAnalytics} />\n                    </>\n                    ) : (\n                        <Route exact path=\"/admin/analytics/\" component={AdminAnalytics} />\n                    )}\n */\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}