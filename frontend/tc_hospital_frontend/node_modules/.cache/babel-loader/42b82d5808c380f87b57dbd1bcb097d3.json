{"ast":null,"code":"var _jsxFileName = \"/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/tc_hospital_frontend/src/components/general/Routes.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport LandingPage from \"../main/general/LandingPage\";\nimport Login from \"../main/general/Login\";\nimport Order from \"../main/Order\";\nimport Menu from \"../main/Menu\";\nimport { history } from \"../../helpers/history\";\nimport { selectIsLoggedIn, selectUserType } from \"../../slice/authSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Routes() {\n  _s();\n\n  /**\n   * @desc (01) check from redux if the user is logged in\n   *       (02) if user is logged in redirect to the specific user type\n   */\n  const loggedIn = useSelector(selectIsLoggedIn);\n  const userType = useSelector(selectUserType);\n  if (loggedIn) history.push(`/${userType}`);\n  /**\n   * @desc return the available routes based on the current user status - logged in or not logged in\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: LandingPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/login\",\n        component: Login\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), loggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/order\",\n          component: Order\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/menu\",\n          component: Menu\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/order\",\n        component: Order\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Routes, \"D35w8o6pOvsJCarD5fVUimi6iqA=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Routes;\nexport default Routes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/tc_hospital_frontend/src/components/general/Routes.js"],"names":["React","useSelector","BrowserRouter","Switch","Route","LandingPage","Login","Order","Menu","history","selectIsLoggedIn","selectUserType","Routes","loggedIn","userType","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA4C,kBAA5C;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAAQC,gBAAR,EAA0BC,cAA1B,QAA+C,uBAA/C;;;;AAGA,SAASC,MAAT,GAAkB;AAAA;;AACd;AACJ;AACA;AACA;AACI,QAAMC,QAAQ,GAAGZ,WAAW,CAACS,gBAAD,CAA5B;AACA,QAAMI,QAAQ,GAAGb,WAAW,CAACU,cAAD,CAA5B;AACA,MAAIE,QAAJ,EAAcJ,OAAO,CAACM,IAAR,CAAc,IAAGD,QAAS,EAA1B;AAEd;AACJ;AACA;;AACI,sBACI;AAAA,2BACI,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAET;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,QAAlB;AAA2B,QAAA,SAAS,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKO,QAAQ,gBACL;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,QAAlB;AAA2B,UAAA,SAAS,EAAEN;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,OAAlB;AAA0B,UAAA,SAAS,EAAEC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,sBADK,gBAML,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,QAAlB;AAA2B,QAAA,SAAS,EAAED;AAAtC;AAAA;AAAA;AAAA;AAAA,cATR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAgBH;;GA5BQK,M;UAKYX,W,EACAA,W;;;KANZW,M;AA8BT,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BrowserRouter, Switch, Route} from \"react-router-dom\";\n\nimport LandingPage from \"../main/general/LandingPage\";\nimport Login from \"../main/general/Login\";\nimport Order from \"../main/Order\";\nimport Menu from \"../main/Menu\";\n\nimport { history } from \"../../helpers/history\";\nimport {selectIsLoggedIn, selectUserType} from \"../../slice/authSlice\";\n\n\nfunction Routes() {\n    /**\n     * @desc (01) check from redux if the user is logged in\n     *       (02) if user is logged in redirect to the specific user type\n     */\n    const loggedIn = useSelector(selectIsLoggedIn);\n    const userType = useSelector(selectUserType);\n    if (loggedIn) history.push(`/${userType}`);\n\n    /**\n     * @desc return the available routes based on the current user status - logged in or not logged in\n     */\n    return (\n        <>\n            <Switch>\n                <Route exact path=\"/\" component={LandingPage} />\n                <Route exact path=\"/login\" component={Login} />\n                {loggedIn ? (\n                    <>\n                        <Route exact path=\"/order\" component={Order} />\n                        <Route exact path=\"/menu\" component={Menu} />\n                    </>\n                    ) : (\n                    <Route exact path=\"/order\" component={Order} />\n                    )}\n            </Switch>\n        </>\n    );\n}\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}