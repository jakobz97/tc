{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { login, logout, signup } from '../services/auth.service';\nimport { history } from \"../helpers/history\";\nconst initialState = {\n  loggedIn: false,\n  userData: {}\n};\nexport const loginAsync = createAsyncThunk('auth/login', async credentials => {\n  return await login(credentials);\n});\nexport const signUpAsync = createAsyncThunk('auth/signup', async signupData => {\n  return await signup(signupData);\n});\nexport const logoutAsync = createAsyncThunk('auth/logout', async () => {\n  return await logout();\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUserData: (state, action) => {\n      //todo update the user data object\n      console.log(action.payload);\n      state.userData = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginAsync.fulfilled, (state, action) => {\n      state.userData = action.payload.userData;\n      state.loggedIn = true;\n      action.payload.userData.userType === 'student' ? history.push(\"/student/search/\") : action.payload.userType === 'coder' ? history.push(\"/coder/editor/\") : history.push(\"/admin/invite/\");\n      window.location.reload();\n    }).addCase(signUpAsync.fulfilled, (state, action) => {\n      console.log('signed up');\n      console.log(state);\n      console.log('signed up', action.payload);\n    }).addCase(logoutAsync.fulfilled, (state, action) => {\n      console.log('loaded logout');\n    });\n  }\n});\nexport const {\n  setUserData\n} = authSlice.actions;\nexport const selectIsLoggedIn = state => state.auth.loggedIn;\nexport const selectUserData = state => state.auth.userData;\nexport const selectUserType = state => state.auth.userData.userType;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/slice/authSlice.js"],"names":["createAsyncThunk","createSlice","login","logout","signup","history","initialState","loggedIn","userData","loginAsync","credentials","signUpAsync","signupData","logoutAsync","authSlice","name","reducers","setUserData","state","action","console","log","payload","extraReducers","builder","addCase","fulfilled","userType","push","window","location","reload","actions","selectIsLoggedIn","auth","selectUserData","selectUserType","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {login, logout, signup} from '../services/auth.service';\nimport {history} from \"../helpers/history\";\n\nconst initialState = {\n    loggedIn: false,\n    userData: {}\n};\n\nexport const loginAsync = createAsyncThunk(\n    'auth/login',\n    async (credentials) => {\n        return await login(credentials);\n    }\n);\n\nexport const signUpAsync = createAsyncThunk(\n    'auth/signup',\n    async (signupData) => {\n        return await signup(signupData);\n    }\n);\n\nexport const logoutAsync = createAsyncThunk(\n    'auth/logout',\n    async () => {\n        return await logout();\n    }\n);\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        setUserData: (state, action) => {\n            //todo update the user data object\n            console.log(action.payload)\n            state.userData = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(loginAsync.fulfilled, (state, action) => {\n                state.userData = action.payload.userData;\n                state.loggedIn = true;\n\n                action.payload.userData.userType === 'student' ? history.push(\"/student/search/\") : action.payload.userType === 'coder' ? history.push(\"/coder/editor/\") : history.push(\"/admin/invite/\");\n                window.location.reload();\n            })\n            .addCase(signUpAsync.fulfilled, (state, action) => {\n                console.log('signed up')\n                console.log(state)\n                console.log('signed up', action.payload)\n            })\n            .addCase(logoutAsync.fulfilled, (state, action) => {\n                console.log('loaded logout');\n            });\n    },\n});\n\nexport const {setUserData} = authSlice.actions;\n\nexport const selectIsLoggedIn = (state) => state.auth.loggedIn;\nexport const selectUserData = (state) => state.auth.userData;\nexport const selectUserType = (state) => state.auth.userData.userType;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}