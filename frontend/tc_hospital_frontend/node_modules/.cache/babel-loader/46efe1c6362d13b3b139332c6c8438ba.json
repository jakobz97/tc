{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.increment = increment;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n/* eslint-disable import/prefer-default-export */\n// Global index counter to preserve source order.\n// We create the style sheet during at the creation of the component,\n// children are handled after the parents, so the order of style elements would be parent->child.\n// It is a problem though when a parent passes a className\n// which needs to override any child's styles.\n// StyleSheet of the child has a higher specificity, because of the source order.\n// So our solution is to render sheets them in the reverse order child->sheet, so\n// that parent has a higher specificity.\n\n\nvar indexCounter = -1e9;\n\nfunction increment() {\n  indexCounter += 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(indexCounter < 0, ['Material-UI: you might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\\n')) : void 0;\n  return indexCounter;\n}","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/tc/frontend/tc_hospital_frontend/node_modules/react-matrix-parallax/node_modules/@material-ui/styles/indexCounter.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","increment","_warning","indexCounter","process","env","NODE_ENV","default","join"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,QAAQ,GAAGP,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIO,YAAY,GAAG,CAAC,GAApB;;AAEA,SAASF,SAAT,GAAqB;AACnBE,EAAAA,YAAY,IAAI,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGJ,QAAQ,CAACK,OAAb,EAAsBJ,YAAY,GAAG,CAArC,EAAwC,CAAC,4CAAD,EAA+C,qDAA/C,EAAsGK,IAAtG,CAA2G,IAA3G,CAAxC,CAAxC,GAAoM,KAAK,CAAzM;AACA,SAAOL,YAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.increment = increment;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\n/* eslint-disable import/prefer-default-export */\n// Global index counter to preserve source order.\n// We create the style sheet during at the creation of the component,\n// children are handled after the parents, so the order of style elements would be parent->child.\n// It is a problem though when a parent passes a className\n// which needs to override any child's styles.\n// StyleSheet of the child has a higher specificity, because of the source order.\n// So our solution is to render sheets them in the reverse order child->sheet, so\n// that parent has a higher specificity.\nvar indexCounter = -1e9;\n\nfunction increment() {\n  indexCounter += 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(indexCounter < 0, ['Material-UI: you might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\\n')) : void 0;\n  return indexCounter;\n}"]},"metadata":{},"sourceType":"script"}