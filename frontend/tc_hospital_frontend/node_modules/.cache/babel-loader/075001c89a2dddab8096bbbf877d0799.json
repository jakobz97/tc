{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { codeCompletion, //compareCodes,\ngetCreatedUploads, getSuitableUploads, uploadCode } from '../services/review.service';\nconst initialState = {\n  createdUploads: [],\n  suitableUploads: {}\n};\nexport const codeCompletionAsync = createAsyncThunk('review/codeCompletion', async data => {\n  return await codeCompletion(data);\n});\nexport const uploadCodeAsync = createAsyncThunk('review/uploadCode', async data => {\n  const response = await uploadCode(data);\n  return response.data;\n});\nexport const getUploadsAsync = createAsyncThunk('review/getUploads', async () => {\n  const response = await getCreatedUploads();\n  return response;\n});\nexport const getSuitableUploadsAsync = createAsyncThunk('review/getSuitableUploads', async searchOffset => {\n  const response = await getSuitableUploads(searchOffset);\n  return response;\n});\n/*\nexport const compareCodesAsync = createAsyncThunk(\n    'review/compareCodes',\n    async (studentCodeData) => {\n        const response = await compareCodes(studentCodeData);\n        return response;\n    }\n);*/\n\nexport const reviewSlice = createSlice({\n  name: 'review',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(codeCompletionAsync.fulfilled, (state, action) => {//todo add to redux\n    }).addCase(uploadCodeAsync.fulfilled, (state, action) => {//todo add to redux\n    }).addCase(getUploadsAsync.fulfilled, (state, action) => {\n      state.createdUploads = action.payload.codes.sort((a, b) => b.proposalCounter - a.proposalCounter);\n    }).addCase(getSuitableUploadsAsync.fulfilled, (state, action) => {\n      state.suitableUploads = { ...state.suitableUploads,\n        ...action.payload\n      };\n    });\n    /*.addCase(compareCodesAsync.fulfilled, (state, action) => {\n        console.log('codes were comapred')\n    })*/\n  }\n});\nexport const {} = reviewSlice.actions;\nexport const selectCreatedUploads = state => state.review.createdUploads;\nexport const selectSuitableUploads = state => state.review.suitableUploads;\nexport default reviewSlice.reducer;","map":{"version":3,"sources":["/Users/Jakob/Desktop/TUM/Semester_01/inno_entre/tech_challenge/code/frontend/tc_hospital_frontend/src/slice/reviewSlice.js"],"names":["createAsyncThunk","createSlice","codeCompletion","getCreatedUploads","getSuitableUploads","uploadCode","initialState","createdUploads","suitableUploads","codeCompletionAsync","data","uploadCodeAsync","response","getUploadsAsync","getSuitableUploadsAsync","searchOffset","reviewSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","codes","sort","a","b","proposalCounter","actions","selectCreatedUploads","review","selectSuitableUploads","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SACIC,cADJ,EAEI;AACAC,iBAHJ,EAIIC,kBAJJ,EAKIC,UALJ,QAMO,4BANP;AAQA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,EADC;AAEjBC,EAAAA,eAAe,EAAE;AAFA,CAArB;AAKA,OAAO,MAAMC,mBAAmB,GAAGT,gBAAgB,CAC/C,uBAD+C,EAE/C,MAAOU,IAAP,IAAgB;AACZ,SAAO,MAAMR,cAAc,CAACQ,IAAD,CAA3B;AACH,CAJ8C,CAA5C;AAOP,OAAO,MAAMC,eAAe,GAAGX,gBAAgB,CAC3C,mBAD2C,EAE3C,MAAOU,IAAP,IAAgB;AACZ,QAAME,QAAQ,GAAG,MAAMP,UAAU,CAACK,IAAD,CAAjC;AACA,SAAOE,QAAQ,CAACF,IAAhB;AACH,CAL0C,CAAxC;AAQP,OAAO,MAAMG,eAAe,GAAGb,gBAAgB,CAC3C,mBAD2C,EAE3C,YAAY;AACR,QAAMY,QAAQ,GAAG,MAAMT,iBAAiB,EAAxC;AACA,SAAOS,QAAP;AACH,CAL0C,CAAxC;AAQP,OAAO,MAAME,uBAAuB,GAAGd,gBAAgB,CACnD,2BADmD,EAEnD,MAAOe,YAAP,IAAwB;AACpB,QAAMH,QAAQ,GAAG,MAAMR,kBAAkB,CAACW,YAAD,CAAzC;AACA,SAAOH,QAAP;AACH,CALkD,CAAhD;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,WAAW,GAAGf,WAAW,CAAC;AACnCgB,EAAAA,IAAI,EAAE,QAD6B;AAEnCX,EAAAA,YAFmC;AAGnCY,EAAAA,QAAQ,EAAE,EAHyB;AAKnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACaZ,mBAAmB,CAACa,SADjC,EAC4C,CAACC,KAAD,EAAQC,MAAR,KAAmB,CACvD;AACH,KAHL,EAIKH,OAJL,CAIaV,eAAe,CAACW,SAJ7B,EAIwC,CAACC,KAAD,EAAQC,MAAR,KAAmB,CACnD;AACH,KANL,EAOKH,OAPL,CAOaR,eAAe,CAACS,SAP7B,EAOwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAAChB,cAAN,GAAuBiB,MAAM,CAACC,OAAP,CAAeC,KAAf,CAAqBC,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,eAAF,GAAkBF,CAAC,CAACE,eAAxD,CAAvB;AACH,KATL,EAUKT,OAVL,CAUaP,uBAAuB,CAACQ,SAVrC,EAUgD,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3DD,MAAAA,KAAK,CAACf,eAAN,GAAwB,EAAC,GAAGe,KAAK,CAACf,eAAV;AAA2B,WAAGgB,MAAM,CAACC;AAArC,OAAxB;AACH,KAZL;AAaI;AACZ;AACA;AACK;AAtBkC,CAAD,CAA/B;AAyBP,OAAO,MAAM,KAAKT,WAAW,CAACe,OAAvB;AAEP,OAAO,MAAMC,oBAAoB,GAAIT,KAAD,IAAWA,KAAK,CAACU,MAAN,CAAa1B,cAArD;AACP,OAAO,MAAM2B,qBAAqB,GAAIX,KAAD,IAAWA,KAAK,CAACU,MAAN,CAAazB,eAAtD;AAEP,eAAeQ,WAAW,CAACmB,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n    codeCompletion,\n    //compareCodes,\n    getCreatedUploads,\n    getSuitableUploads,\n    uploadCode\n} from '../services/review.service';\n\nconst initialState = {\n    createdUploads: [],\n    suitableUploads: {}\n};\n\nexport const codeCompletionAsync = createAsyncThunk(\n    'review/codeCompletion',\n    async (data) => {\n        return await codeCompletion(data);\n    }\n);\n\nexport const uploadCodeAsync = createAsyncThunk(\n    'review/uploadCode',\n    async (data) => {\n        const response = await uploadCode(data);\n        return response.data;\n    }\n);\n\nexport const getUploadsAsync = createAsyncThunk(\n    'review/getUploads',\n    async () => {\n        const response = await getCreatedUploads();\n        return response;\n    }\n);\n\nexport const getSuitableUploadsAsync = createAsyncThunk(\n    'review/getSuitableUploads',\n    async (searchOffset) => {\n        const response = await getSuitableUploads(searchOffset);\n        return response;\n    }\n);\n\n/*\nexport const compareCodesAsync = createAsyncThunk(\n    'review/compareCodes',\n    async (studentCodeData) => {\n        const response = await compareCodes(studentCodeData);\n        return response;\n    }\n);*/\n\nexport const reviewSlice = createSlice({\n    name: 'review',\n    initialState,\n    reducers: {\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(codeCompletionAsync.fulfilled, (state, action) => {\n                //todo add to redux\n            })\n            .addCase(uploadCodeAsync.fulfilled, (state, action) => {\n                //todo add to redux\n            })\n            .addCase(getUploadsAsync.fulfilled, (state, action) => {\n                state.createdUploads = action.payload.codes.sort((a, b) => b.proposalCounter-a.proposalCounter);\n            })\n            .addCase(getSuitableUploadsAsync.fulfilled, (state, action) => {\n                state.suitableUploads = {...state.suitableUploads, ...action.payload}\n            })\n            /*.addCase(compareCodesAsync.fulfilled, (state, action) => {\n                console.log('codes were comapred')\n            })*/\n    },\n});\n\nexport const {} = reviewSlice.actions;\n\nexport const selectCreatedUploads = (state) => state.review.createdUploads;\nexport const selectSuitableUploads = (state) => state.review.suitableUploads;\n\nexport default reviewSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}